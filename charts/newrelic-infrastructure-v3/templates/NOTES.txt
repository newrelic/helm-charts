{{- if not .Values.forceUnsupportedInterval }}
{{- $max := 45 }}
{{- $min := 10 }}
{{- if not (.Values.common.config.interval | hasSuffix "s") }}
{{ fail (printf "Interval must be between %ds and %ds" $min $max ) }}
{{- end }}
{{- if gt ( .Values.common.config.interval | trimSuffix "s" | int64 ) $max }}
{{ fail (printf "Intervals larger than %ds are not supported" $max) }}
{{- end }}
{{- if lt ( .Values.common.config.interval | trimSuffix "s" | int64 ) $min }}
{{ fail (printf "Intervals smaller than %ds are not supported" $min) }}
{{- end }}
{{- end }}

{{- if or (not .Values.ksm.enabled) (not .Values.kubelet.enabled) }}
Warning:
========

You have specified ksm or kubelet integration components as not enabled.
Those components are needed to have the full experience on NROne kubernetes explorer.
{{- end }}

{{- if and .Values.controlPlane.enabled (not (include "newrelic.controlPlane.hostNetwork" .)) }}
Warning:
========

Most Control Plane components listen in the loopback address only, which is not reachable without `hostNetwork: true`.
Control plane autodiscovery might not work as expected.
You can enable hostNetwork for control plane scraper pods only by setting `controlPlane.unprivilegedHostNetwork: true`,
or alternative disable control plane monitoring altogether with `controlPlane.enabled: false`.
{{- end }}

{{- if and (include "newrelic.fargate" .) .Values.kubelet.affinity.nodeAffinity }}
Warning:
========

You have specified both an EKS Fargate environment (global.fargate) and custom
nodeAffinity rules, so we couldn't automatically exclude the kubelet daemonSet from
Fargate nodes. In order for the integration to work, you MUST manually exclude
the daemonSet from Fargate nodes.

Please make sure your custom .Values.kubelet.affinity.nodeAffinity achieve the same effect as:

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: eks.amazonaws.com/compute-type
              operator: NotIn
              values:
                - fargate
{{- end }}

{{- if and .Values.nodeAffinity .Values.controlPlane.enabled }}
WARNING: `nodeAffinity` is deprecated
=====================================

We have applied the old `nodeAffinity` to KSM and Kubelet components, but *NOT* to the control plane component as it
might conflict with the default nodeSelector.
This shimming will be removed in the future, please convert your `nodeAffinity` item into:
`ksm.affinity.nodeAffinity`, `controlPlane.affinity.nodeAffinity`, and `kubelet.affinity.nodeAffinity`.
{{- end }}

{{- if and .Values.integrations_config }}
WARNING: `integrations_config` is deprecated
============================================

We have automatically translated `integrations_config` to the new format, but this shimming will be removed in the
future. Please migrate your configs to the new format in the `integrations` key.
{{- end }}

{{- if or .Values.kubeStateMetricsScheme .Values.kubeStateMetricsPort .Values.kubeStateMetricsUrl .Values.kubeStateMetricsPodLabel .Values.kubeStateMetricsNamespace }}
WARNING: `kubeStateMetrics*` are deprecated
===========================================

We have automatically translated your `kubeStateMetrics*` values to the new format, but this shimming will be removed in
the future. Please migrate your configs to the new format in the `ksm.config` key.
{{- end }}

{{- if .Values.runAsUser }}
WARNING: `runAsUser` is deprecated
==================================

We have automatically translated your `runAsUser` setting to the new format, but this shimming will be removed in the
future. Please migrate your configs to the new format in the `securityContext` key.
{{- end }}

{{- if .Values.config }}
WARNING: `config` is deprecated
===============================

We have automatically translated your `config` setting to the new format, but this shimming will be removed in the
future. Please migrate your agent config to the new format in the `common.agentConfig` key.
{{- end }}


{{ $errors:= "\n" }}

{{- if .Values.logFile }}
{{ $errors = printf "%s\n\n%s" $errors (include "newrelic.compatibility.message.logFile" . ) }}
{{- end }}

{{- if .Values.tolerations }}
{{ $errors = printf "%s\n\n%s" $errors (include "newrelic.compatibility.message.tolerations" . ) }}
{{- end }}

{{- if .Values.resources }}
{{ $errors = printf "%s\n\n%s" $errors (include "newrelic.compatibility.message.resources" . ) }}
{{- end }}

{{- if .Values.image }}
{{ $errors = printf "%s\n\n%s" $errors (include "newrelic.compatibility.message.image" . ) }}
{{- end }}

{{- if (or .Values.enableWindows .Values.windowsOsList .Values.windowsSecurityContext .Values.windowsNodeSelector)}}
{{ $errors = printf "%s\n\n%s" $errors (include "newrelic.compatibility.message.windows" . ) }}
{{- end }}

{{- if ( or .Values.controllerManagerEndpointUrl  .Values.schedulerEndpointUrl .Values.etcdEndpointUrl .Values.apiServerEndpointUrl )}}
{{ $errors = printf "%s\n\n%s" $errors (include "newrelic.compatibility.message.apiURL" . ) }}
{{- end }}

{{- if ( or .Values.etcdTlsSecretName .Values.etcdTlsSecretNamespace )}}
{{ $errors = printf "%s\n\n%s" $errors (include "newrelic.compatibility.message.etcdSecrets" . ) }}
{{- end }}

{{- if .Values.apiServerSecurePort }}
{{ $errors = printf "%s\n\n%s" $errors (include "newrelic.compatibility.message.apiServerSecurePort" . ) }}
{{- end }}

{{- if $errors | trim}}
{{- fail $errors }}
{{- end }}
