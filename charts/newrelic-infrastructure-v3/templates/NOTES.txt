Your deployment of the New Relic Infrastructure agent is complete if you have not used --wait during the installation of this helm chart. You can check on the progress of this by running the following command:

    kubectl get daemonset -o wide -w --namespace {{ .Release.Namespace }} {{ template "newrelic.fullname" . }}

{{- if or (not .Values.ksm.enabled) (not .Values.kubelet.enabled) }}

###########
# WARNING #
###########

You have specified ksm or kubelet integration components as not enabled.
Those components are needed to have the full experience on NROne kubernetes explorer.

{{- end }}

{{- if and .Values.nodeAffinity (.Values.controlPlane.enabled) (not (include "newrelic.fargate" .)) }}

###########
# WARNING #
###########

You have specified the legacy "nodeAffinity" option into values, however the new version of the chart
support a different nodeAffinity options per component.

The value specified has been applied automatically to ksm and kubelet components, however **NOT** to the control plane daemonSet.

Keep in mind you should leverage the new ksm.affinity.nodeAffinity, controlPlane.affinity.nodeAffinity
and kubelet.affinity.nodeAffinity to customize nodeAffinity.

{{- end }}

{{- if .Values.resources }}

###########
# WARNING #
###########

You have specified the legacy "resources" option into values, however the new version of the chart
support different resources per component, therefore the value specified has been ignored.

Please use ksm.resources, controlPlane.resources and kubelet.resources.

{{- end }}

{{- if .Values.tolerations }}

###########
# WARNING #
###########

You have specified the legacy "tolerations" options into values, however the new version of the chart
support different tolerations per component, therefore the value specified has been ignored.

Please use ksm.tolerations, controlPlane.tolerations and kubelet.tolerations.

{{- end }}

{{- if .image }}

###########
# WARNING #
###########

You have specified into values one of the legacy options "image.*".
The following values are no longer supported and are currently ignored.
 - image.repository
 - image.tag
 - image.pullPolicy
 - image.pullSecrets

Notice that the 3.x version of the integration uses 3 different images.
Please set:
 - images.forwarder.* to configure the image in charge of sending data to newrelic backend
 - images.agent.* to configure the image bundling the agent and onHost integration
 - images.integration.* to configure the image in charge of scraping k8s data

{{- end }}

{{- if (or .Values.enableWindows .windowsOsList .windowsSecurityContext .windowsNodeSelector)}}

###########
# WARNING #
###########

Windows is currently supported by 2.x charts only and therefore "windowsOsList" "windowsSecurityContext" "windowsNodeSelector"
are no longer supported.

{{- end }}

{{- if ( or .Values.etcdTlsSecretName .etcdTlsSecretNamespace )}}

###########
# WARNING #
###########

Values "etcdTlsSecretName" and "etcdTlsSecretNamespace" are no longer supported, please specify them in the config
file. Example:
# - endpoints:
#     - url: https://localhost:9979
#       insecureSkipVerify: true
#       auth:
#         type: mTLS
#         mtls:
#           secretName: secret-name
#           secretNamespace: secret-namespace

{{- end }}

{{- if .Values.logFile }}

###########
# WARNING #
###########

The "logFile" value is no longer supported, please specify the option "log_file" directly in "common.agentConfig".

Notice that you will need as well to set securityContext.readOnlyRootFilesystem to false or add extraVolumes to allow
the container to write to such location

{{- end }}

{{- if .Values.apiServerSecurePort }}

###########
# WARNING #
###########

The "apiServerSecurePort" value is no longer supported, please specify it in the section "apiServer.autodiscover[].endpoints".

{{- end }}

{{- if and (include "newrelic.fargate" .) .Values.kubelet.affinity.nodeAffinity }}

###########
# WARNING #
###########

You have specified both an EKS Fargate environment (global.fargate) and custom
nodeAffinity rules, so we couldn't automatically exclude the kubelet daemonSet from
Fargate nodes. In order for the integration to work, you MUST manually exclude
the daemonSet from Fargate nodes.

Please make sure your custom .Values.kubelet.affinity.nodeAffinity achieve the same effect as:

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: eks.amazonaws.com/compute-type
              operator: NotIn
              values:
                - fargate
{{- end }}
