suite: test initContainers
templates:
  - templates/controlplane/daemonset.yaml
  - templates/controlplane/configmap.yaml
  - templates/kubelet/daemonset.yaml
  - templates/kubelet/configmap.yaml
  - templates/kubelet/integrations-configmap.yaml
  - templates/ksm/deployment.yaml
  - templates/ksm/configmap.yaml
  - templates/agent-configmap.yaml
  - templates/secret.yaml
tests:
  - it: initContainers are not populated if nothing is set
    set:
      licenseKey: test
      cluster: test
    asserts:
      - equal:
          path: spec.template.spec.initContainers
          value: null
        template: templates/ksm/deployment.yaml
      - equal:
          path: spec.template.spec.initContainers
          value: null
        template: templates/controlplane/daemonset.yaml
      - equal:
          path: spec.template.spec.initContainers
          value: null
        template: templates/kubelet/daemonset.yaml
  - it: init containers are populated
    set:
      licenseKey: test
      cluster: test
      kubelet:
        initContainers:
          - name: controlplane
            image: test
            securityContext:
              mode: kubelet
      controlPlane:
        initContainers:
          - name: controlplane
            image: test
            securityContext:
              mode: controlPlane
      ksm:
        initContainers:
          - name: controlplane
            image: test
            securityContext:
              mode: ksm
    asserts:
      - equal:
          path: spec.template.spec.initContainers
          value:
            - name: controlplane
              image: test
              securityContext:
                mode: ksm
        template: templates/ksm/deployment.yaml
      - equal:
          path: spec.template.spec.initContainers
          value:
            - name: controlplane
              image: test
              securityContext:
                mode: controlPlane
        template: templates/controlplane/daemonset.yaml
      - equal:
          path: spec.template.spec.initContainers
          value:
            - name: controlplane
              image: test
              securityContext:
                mode: kubelet
        template: templates/kubelet/daemonset.yaml
  - it: init containers are populated and templated
    set:
      licenseKey: test
      cluster: test
      myAwesomeValue: testInjecting
      ksm:
        initContainers:
          - name: controlplane
            image: test
            securityContext:
              mode: "{{ .Values.myAwesomeValue }}"
    asserts:
      - equal:
          path: spec.template.spec.initContainers
          value:
            - name: controlplane
              image: test
              securityContext:
                mode: testInjecting
        template: templates/ksm/deployment.yaml
