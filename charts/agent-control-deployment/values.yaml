# -- Override the name of the chart used to template resource names.
# @default -- See `values.yaml`
nameOverride: "agent-control"
# -- Name of the Kubernetes cluster monitored. Can be configured also with `global.cluster`.
cluster: ""
# -- This set this license key to use. Can be configured also with `global.licenseKey`
licenseKey: ""
# -- In case you don't want to have the license key in you values, this allows you to point to a user created secret to get the key from there. Can be configured also with `global.customSecretName`
customSecretName: ""
# -- In case you don't want to have the license key in you values, this allows you to point to which secret key is the license key located. Can be configured also with `global.customSecretLicenseKey`
customSecretLicenseKey: ""

# -- Namespace where the sub-agents will be deployed.
# @default -- "newrelic"
subAgentsNamespace: "newrelic"

# -- Image for the New Relic Agent Control
# @default -- See `values.yaml`
image:
  registry:
  repository: newrelic/newrelic-agent-control
  # @default It defaults to `appVersion` in `Chart.yaml`.
  tag: ""
  pullPolicy: IfNotPresent
  # -- The secrets that are needed to pull images from a custom registry.
  pullSecrets: []
  # - name: regsecret

# -- Add user environment variables to the agent
extraEnv: []
# -- Add user environment from configMaps or secrets as variables to the agent
extraEnvFrom: []
# -- Volumes to mount in the containers
extraVolumes: []
# -- Defines where to mount volumes specified with `extraVolumes`
extraVolumeMounts: []

# -- Settings controlling ServiceAccount creation.
# @default -- See `values.yaml`
serviceAccount:
  # -- Whether the chart should automatically create the ServiceAccount objects required to run.
  create: true
  annotations: {}
  # If not set and create is true, a name is generated using the full name template
  name: ""

# -- Additional labels for chart objects. Can be configured also with `global.labels`
labels: {}
# -- Annotations to be added to all pods created by the integration.
podAnnotations: {}
# -- Additional labels for chart pods. Can be configured also with `global.podLabels`
podLabels: {}

# -- Resource limits to be added to all pods created by the integration.
# @default -- `{}`
resources: {}

# -- Sets pod's priorityClassName. Can be configured also with `global.priorityClassName`
priorityClassName: ""
# -- (bool) Sets pod's hostNetwork. Can be configured also with `global.hostNetwork`
# @default -- `false`
hostNetwork:
# -- Sets security context (at pod level). Can be configured also with `global.podSecurityContext`
podSecurityContext: {}
# -- Sets security context (at container level). Can be configured also with `global.containerSecurityContext`
containerSecurityContext: {}

# -- Sets pod's dnsConfig. Can be configured also with `global.dnsConfig`
dnsConfig: {}

# Settings controlling RBAC objects creation.
rbac:
  # -- Whether the chart should automatically create the RBAC objects required to run.
  create: true

# -- Sets pod/node affinities. Can be configured also with `global.affinity`
affinity: {}
# -- Sets pod's node selector. Can be configured also with `global.nodeSelector`
nodeSelector: {}
# -- Sets pod's tolerations to node taints. Can be configured also with `global.tolerations`
tolerations: []

# -- (bool) Send the metrics to the staging backend. Requires a valid staging license key. Can be configured also with `global.nrStaging`
# @default -- `false`
nrStaging:

# -- (bool) Sets the debug logs to this integration or all integrations if it is set globally. Can be configured also with `global.verboseLog`.
# If you need to change the logs to trace or change more complex options, please refer to config.log
# @default -- `false`
verboseLog:

# -- proxy configuration. It is propagated to both the system identity creation job, and to the agent control instance
proxy:
  # -- Proxy URL proxy <protocol>://<host>:<port>
  # url:
  # -- System path with the CA certificates in PEM format. All `.pem` files in the directory are read.
  # ca_bundle_dir:
  # -- System path with the CA certificate in PEM format.
  # ca_bundle_file:

# -- AgentControl config options used to generate the configFile passed to the binary.
# You can overwrite the configFile generated with a raw one via config.override
# @default -- See `values.yaml`
config:

  # -- List of managed agents that will be deployed.
  # The key represents the name of the agent that should used when defining its configuration.
  # @default -- `{}` (See `values.yaml`)
  agents:
  # In the example below, open-telemetry is a managed agent that will be deployed.
  # agents:
  #   open-telemetry:
  #     # -- Agent type <namespace>/<name>:<version>
  #     agent_type: newrelic/io.opentelemetry.collector:0.1.0

  # -- Log configuration. The log level can be overwritten as well via verboseLog
  # @default -- `{}` (See `values.yaml`)
  log:
  #   level:
  #   format:
  #   insecure_fine_grained_level:

  # -- Set the status server port
  # @default -- See `values.yaml`
  status_server:
    port: 51200

  # -- (bool) enables or disables remote update from Fleet Control for the agent-control-deployment chart
  # @default -- "true"
  acRemoteUpdate: true
  # -- (bool) enables or disables remote update from Fleet Control for the agent-control-cd chart
  # @default -- "true"
  cdRemoteUpdate: true

  # -- List of allowed chart repository URLs. The Agent Control will only allow to deploy agents from these repositories.
  # @default -- `[]`(Only newrelic chart repositories allowed: ["https://helm-charts.newrelic.com","https://newrelic.github.io/<>"])
  allowedChartRepositoryUrl: []

  fleet_control:
    # -- Enables or disables the auth against fleet control. It implies to disable any fleet communication and running the agent
    # in stand alone mode where only the agents specified on `.config.subAgents` will be launched.
    enabled: true
    # -- Specify a fleet_id to automatically connect the Agent Control to an existing fleet.
    fleet_id: ""

  # -- Overrides the configuration that has been created automatically by the chart.
  # This configuration here will be **MERGED** with the configuration specified above.
  override: {}

# -- List of managed agents configs.
# The key represents the name of the agent that should match the one specified in .config.agents.
# @default -- `{}` (See `values.yaml`)
agentsConfig: {}
# In the example below, open-telemetry configuration is specified.
# agentsConfig:
#   open-telemetry:
#     # -- Version of the newrelic/nr-k8s-otel-collector Helm Chart.
#     chart_version: "0.8.0"
#     # -- Values to be passed to the newrelic/nr-k8s-otel-collector Helm Chart.
#     # By default the Agent type already has the `licenseKey` and `cluster` values set to the ones provided,
#     # so it is not necessary to set them here.
#     chart_values:
#       nr-k8s-otel-collector: {}
#       global: {}

# -- Configuration for the system identity registration process.
# These options provides the required data to run the pre-install job that creates the system identitythat is used when communicating via OpAMP.
# System identity registration is executed only once. Subsequent upgrades will not attempt to create the identity again.
# Therefore, `Helm Upgrade` works even though the identityClientSecret or the identityClientAuthToken are expired.
# @default -- See `values.yaml`
systemIdentity:

  # -- Set it to false to disable the registration of a new system identity.
  # Set this to `false` to configure a pre-existing system identity via secret.
  # The secret should be already created in the namespace having as keys "CLIENT_ID" and "private_key" of the identity to leverage.
  create: true

  # -- Set it to customize the name of the secret that is created and mounted in the agentControl deployment pod
  # -- if create is set to false a secret having this name is expected in the AC namespace
  secretName:

  # -- Organization ID used to create the system identity.
  organizationId: ""

  image:
    repository: newrelic/agent-control-system-identity-registration
    tag: "0.0.10"
    pullPolicy: IfNotPresent

  # -- Configuration for the parent identity
  # You can either authenticate via ClientId/ClientSecret or pass directly an `AuthToken` and manage locally the authentication.
  # The authToken can be retrieve via the cli command "newrelic-auth-cli authenticate ...".
  parentIdentity:
    # -- Identity clientId to use.
    clientId: ""
    # -- Identity clientSecret to use.
    clientSecret: ""
    # -- Identity auth token. This option takes precedence over secret and skips authentication.
    authToken: ""
    # -- In case you don't want to have the clientId, the clientSecret and the clientAuthToken in your values, you can point to a secret to get the data from there.
    # The secret data is mounted in the job via environment variables to generate the system identity.
    fromSecret: ""

  # -- Volumes to mount in the systemIdentity job
  extraVolumes: []
  # -- Defines where, in the systemIdentity job, to mount volumes specified with `extraVolumes`
  extraVolumeMounts: []
