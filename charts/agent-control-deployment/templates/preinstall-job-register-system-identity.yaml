{{- if include "newrelic-agent-control.auth.secret.shouldRunJob" . -}}
{{- /*
SystemIdentity currently supports userKey and L1/L2 identities. (userKey to be deprecated)
Both user key secret or L1/L2 identities are used only in the step that create the system identity.
The secret that is created by the common-library does not allow to add annotations so the secret is removed
once the installation hook is finished, so I have to add it as a hook.

As both ways co-exist, we'll add a check to ensure at least one exits
*/ -}}
{{- if and (not (include "newrelic.common.userKey._customSecretName" .)) (not (include "newrelic.common.userKey._userKey" .)) (not (include "newrelic-agent-control.auth.customIdentitySecretName" .)) (not (include "newrelic-agent-control.auth.l1Identity" .)) -}}
  {{- fail "You must specify a userKey/customUserKeySecretName or l1Identity/customIdentitySecretName" -}}
{{- end -}}

{{- if and (not (include "newrelic.common.userKey._customSecretName" .)) (include "newrelic.common.userKey._userKey" .) }}
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1010"
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "preinstall-user-key" ) }}
  namespace: {{ .Release.Namespace }}
data:
  {{ include "newrelic.common.userKey.secretKeyName" . }}: {{ include "newrelic.common.userKey._userKey" . | b64enc }}
{{- end }}

{{/* L1/L2 Client Credentials */}}
{{- if and (not (include "newrelic-agent-control.auth.customIdentitySecretName" .)) (include "newrelic-agent-control.auth.l1Identity" .) }}
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1010"
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic-agent-control.auth.generatedIdentityCredentialsSecretName" . }}
  namespace: {{ .Release.Namespace }}
data:
  {{ include "newrelic-agent-control.auth.l1IdentityCredentialsKey.clientIdKeyName" . }}: {{ include "newrelic-agent-control.auth.identityClientId" . | b64enc }}
  {{ include "newrelic-agent-control.auth.l1IdentityCredentialsKey.clientSecretKeyName" . }}: {{ include "newrelic-agent-control.auth.identityClientSecret" . | b64enc }}
{{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1005"
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "system-identity-installer" ) }}
  namespace: {{ .Release.Namespace }}
spec:
  ttlSecondsAfterFinished: 120
  backoffLimit: 3
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.serviceAccount.name" .) "suffix" "auth" ) }}
      containers:
        - name: register-system-identity
          image: "{{ (.Values.systemIdentityRegistration.image).repository }}:{{ (.Values.systemIdentityRegistration.image).tag }}"
          imagePullPolicy: {{ .Values.systemIdentityRegistration.image.pullPolicy }}
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          env:
            {{- if or  (include "newrelic.common.userKey._customSecretName" .) (include "newrelic.common.userKey._userKey" .) }}
            - name: USER_KEY
              valueFrom:
                secretKeyRef:
                  {{- if include "newrelic.common.userKey._customSecretName" . }}
                  name: {{ include "newrelic.common.userKey.secretName" . }}
                  {{- else }}
                  name: {{ include "newrelic.common.userKey.generatedSecretName" . }}
                  {{- end }}
                  key: {{ include "newrelic.common.userKey.secretKeyName" . }}
            {{- end }}
            {{- if or (include "newrelic-agent-control.auth.customIdentitySecretName" .) (include "newrelic-agent-control.auth.l1Identity" .) }}
            - name: NEW_RELIC_AUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "newrelic-agent-control.auth.identityCredentialsSecretName" . }}
                  key: {{ include "newrelic-agent-control.auth.l1IdentityCredentialsKey.clientIdKeyName" . }}
            - name: NEW_RELIC_AUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "newrelic-agent-control.auth.identityCredentialsSecretName" . }}
                  key: {{ include "newrelic-agent-control.auth.l1IdentityCredentialsKey.clientSecretKeyName" . }}
            {{- end }}
          command:
            - bash
          args:
            - -c
            - |
              set -euo pipefail

              echo Checking if the secret '{{ include "newrelic-agent-control.auth.secret.name" . }}' is already present in the cluster
              if kubectl get secret {{ include "newrelic-agent-control.auth.secret.name" . }}; then
                echo System identity already exists. Exiting gracefully...
                exit 0
              fi

              echo "Secret not present, creating a new System Identity..."

              REGION={{ include "newrelic.common.region" . }}
              echo "Authenticating with New Relic ($REGION)..."

              ACCESS_TOKEN=""
              for RETRY in 1 2 3; do
                ACCESS_TOKEN=$(newrelic-auth-cli authenticate --client-id "$NEW_RELIC_AUTH_CLIENT_ID" --client-secret "$NEW_RELIC_AUTH_CLIENT_SECRET" --environment "$REGION" --output-token-format Plain)

                if [ -n "$ACCESS_TOKEN" ]; then
                  echo "Access token obtained successfully"
                  break
                fi

                if [ -z $ACCESS_TOKEN ]; then
                  echo "Network error occurred or no HTTP response was received. Retrying ($RETRY/3)..."
                  sleep 2
                  continue
                fi
              done

              if [ -z "$ACCESS_TOKEN" ]; then
                echo "Error getting system identity auth token"
                exit 99
              fi

              echo "Authenticated successfully"
              echo "Creating System Identity..."

              ORG_ID={{ include "newrelic-agent-control.auth.organizationId" . }}
              TEMPORAL_FOLDER=gen-folder
              mkdir $TEMPORAL_FOLDER
              CLIENT_ID=""
              DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              NAME="System Identity for $(hostname) - $DATE"
              for RETRY in 1 2 3; do
                OUTPUT=$(newrelic-auth-cli create-identity key --name "$NAME" --organization-id "$ORG_ID" --client-id "$NEW_RELIC_AUTH_CLIENT_ID" --environment "$REGION" --bearer-access-token "$ACCESS_TOKEN" --output-platform "local-file" --output-local-filepath "$TEMPORAL_FOLDER/key")
                CLIENT_ID=$(echo "$OUTPUT" | jq -r '.client_id // empty')

                if [ -n "$CLIENT_ID" ]; then
                  echo "System identity created successfully"
                  break
                fi
                if [ -z "$CLIENT_ID" ]; then
                  echo "Network error occurred or no HTTP response was received. Retrying ($RETRY/3)..."
                  sleep 2
                  continue
                fi
              done
              if [ -z "$CLIENT_ID" ]; then
                echo "Error creating system identity"
                exit 99
              fi

              echo Creating the secret '{{ include "newrelic-agent-control.auth.secret.name" . }}'...
              kubectl create secret generic --dry-run=client -o json \
                {{ include "newrelic-agent-control.auth.secret.name" . }} \
                --from-literal=CLIENT_ID=$CLIENT_ID \
                --from-file="private_key=$TEMPORAL_FOLDER/key" | \
              jq '.metadata.labels += ({{ include "newrelic.common.labels" . | fromYaml | toJson }} + {"app.kubernetes.io/managed-by": "newrelic-agent-control"} + {"newrelic.io/agent-id": "agent-control"} )' | \
              kubectl apply -n "{{ .Release.Namespace }}" -f -
---
{{ if .Values.rbac.create }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1010"
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "auth") }}
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [ "" ]
    resources: [ "secrets" ]
    verbs:
      - create
      - patch
      - update
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1009"
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "auth") }}
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "auth") }}
subjects:
  - kind: ServiceAccount
    name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.serviceAccount.name" .) "suffix" "auth" ) }}
    namespace: {{ .Release.Namespace }}
{{- end }}

{{- if include "newrelic.common.serviceAccount.create" . }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1010"
  {{- if include "newrelic.common.serviceAccount.annotations" . }}
    {{- include "newrelic.common.serviceAccount.annotations" . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.serviceAccount.name" .) "suffix" "auth" ) }}
  namespace: {{ .Release.Namespace }}
{{- end -}}
{{- end -}}
