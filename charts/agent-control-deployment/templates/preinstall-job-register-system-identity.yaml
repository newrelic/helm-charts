{{- if include "newrelic-agent-control.auth.secret.shouldRunJob" . -}}
{{- if and (not (include "newrelic-agent-control.auth.customIdentitySecretName" .)) (not (include "newrelic-agent-control.auth.parentIdentity" .)) -}}
  {{- fail "You must specify a customIdentitySecretName or identityClientId identityClientSecret/identityClientAuthToken" -}}
{{- end -}}

{{/* We create the secret if the customIdentitySecretName is not specified  */}}
{{- if not (include "newrelic-agent-control.auth.customIdentitySecretName" .) }}
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1010"
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic-agent-control.auth.generatedIdentityCredentialsSecretName" . }}
  namespace: {{ .Release.Namespace }}
data:
  NEW_RELIC_AUTH_CLIENT_ID: {{ include "newrelic-agent-control.auth.identityClientId" . | b64enc }}
  NEW_RELIC_AUTH_CLIENT_SECRET: {{ include "newrelic-agent-control.auth.identityClientSecret" . | b64enc }}
  NEW_RELIC_AUTH_TOKEN: {{ include "newrelic-agent-control.auth.identityClientAuthToken" . | b64enc   }}
{{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1005"
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "generate-system-identity" ) }}
  namespace: {{ .Release.Namespace }}
spec:
  ttlSecondsAfterFinished: 120
  backoffLimit: 3
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.serviceAccount.name" .) "suffix" "auth" ) }}
      containers:
        - name: register-system-identity
          image: "{{ (.Values.systemIdentityRegistration.image).repository }}:{{ (.Values.systemIdentityRegistration.image).tag }}"
          imagePullPolicy: {{ .Values.systemIdentityRegistration.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          envFrom:
            - secretRef:
                name: {{ include "newrelic-agent-control.auth.identityCredentialsSecretName" . }}
          command:
            - bash
          args:
            - -c
            - |
              set -euo pipefail

              echo Checking if the secret '{{ include "newrelic-agent-control.auth.secret.name" . }}' is already present in the cluster
              if kubectl get secret {{ include "newrelic-agent-control.auth.secret.name" . }}; then
                echo System identity already exists. Exiting gracefully...
                exit 0
              fi

              echo "Secret not present, creating a new System Identity..."

              REGION={{ include "newrelic.common.region" . }}
              echo "Authenticating with New Relic ($REGION)..."

              ACCESS_TOKEN=""
              if [ -n "$NEW_RELIC_AUTH_TOKEN" ]; then
                echo "Access token obtained via config"
                ACCESS_TOKEN=$NEW_RELIC_AUTH_TOKEN
              else
                for RETRY in 1 2 3; do
                  
                  ACCESS_TOKEN=$(newrelic-auth-cli authenticate --client-id "$NEW_RELIC_AUTH_CLIENT_ID" --client-secret "$NEW_RELIC_AUTH_CLIENT_SECRET" --environment "$REGION" --output-token-format Plain)

                  if [ -n "$ACCESS_TOKEN" ]; then
                    echo "Access token obtained successfully via client secret"
                    break
                  fi

                  if [ -z $ACCESS_TOKEN ]; then
                    echo "Network error occurred or no HTTP response was received. Retrying ($RETRY/3)..."
                    sleep 2
                    continue
                  fi
                done

                if [ -z "$ACCESS_TOKEN" ]; then
                  echo "Error getting system identity auth token"
                  exit 99
                fi
                echo "Authenticated successfully"
              fi

              echo "Creating System Identity..."

              ORG_ID={{ include "newrelic-agent-control.auth.organizationId" . }}
              TEMPORAL_FOLDER=/tmp/gen-folder
              mkdir $TEMPORAL_FOLDER
              CLIENT_ID=""
              DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              NAME="System Identity for $(hostname) - $DATE"
              for RETRY in 1 2 3; do
                OUTPUT=$(newrelic-auth-cli create-identity key --name "$NAME" --organization-id "$ORG_ID" --client-id "$NEW_RELIC_AUTH_CLIENT_ID" --environment "$REGION" --bearer-access-token "$ACCESS_TOKEN" --output-platform "local-file" --output-local-filepath "$TEMPORAL_FOLDER/key")
                CLIENT_ID=$(echo "$OUTPUT" | jq -r '.client_id // empty')

                if [ -n "$CLIENT_ID" ]; then
                  echo "System identity created successfully"
                  break
                fi
                if [ -z "$CLIENT_ID" ]; then
                  echo "Network error occurred or no HTTP response was received. Retrying ($RETRY/3)..."
                  sleep 2
                  continue
                fi
              done
              if [ -z "$CLIENT_ID" ]; then
                echo "Error creating system identity"
                exit 99
              fi

              echo Creating the secret '{{ include "newrelic-agent-control.auth.secret.name" . }}'...
              kubectl create secret generic --dry-run=client -o json \
                {{ include "newrelic-agent-control.auth.secret.name" . }} \
                --from-literal=CLIENT_ID=$CLIENT_ID \
                --from-file="private_key=$TEMPORAL_FOLDER/key" | \
              jq '.metadata.labels += ({{ include "newrelic.common.labels" . | fromYaml | toJson }} + {"app.kubernetes.io/managed-by": "newrelic-agent-control"} + {"newrelic.io/agent-id": "agent-control"} )' | \
              kubectl apply -n "{{ .Release.Namespace }}" -f -
---
{{ if .Values.rbac.create }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1010"
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "auth") }}
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [ "" ]
    resources: [ "secrets" ]
    verbs:
      - create
      - patch
      - update
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1009"
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "auth") }}
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "auth") }}
subjects:
  - kind: ServiceAccount
    name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.serviceAccount.name" .) "suffix" "auth" ) }}
    namespace: {{ .Release.Namespace }}
{{- end }}

{{- if include "newrelic.common.serviceAccount.create" . }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1010"
  {{- if include "newrelic.common.serviceAccount.annotations" . }}
    {{- include "newrelic.common.serviceAccount.annotations" . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.serviceAccount.name" .) "suffix" "auth" ) }}
  namespace: {{ .Release.Namespace }}
{{- end -}}
{{- end -}}
