---
# Source: nr-k8s-otel-collector/templates/daemonset-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nr-k8s-otel-collector-daemonset-config
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nr-k8s-otel-collector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nr-k8s-otel-collector
    app.kubernetes.io/version: 1.0.3
    helm.sh/chart: nr-k8s-otel-collector-0.8.34
data:
  daemonset-config.yaml: |
    receivers:
      
      hostmetrics:
        # TODO (chris): this is a linux specific configuration
        root_path: /hostfs
        collection_interval: 1m
        scrapers:
          cpu:
            metrics:
              system.cpu.time:
                enabled: false
              system.cpu.utilization:
                enabled: true
          load:
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
          paging:
            metrics:
              system.paging.utilization:
                enabled: false
              system.paging.faults:
                enabled: false
          filesystem:
            metrics:
              system.filesystem.utilization:
                enabled: true
          disk:
            metrics:
              system.disk.merged:
                enabled: false
              system.disk.pending_operations:
                enabled: false
              system.disk.weighted_io_time:
                enabled: false
          network:
            metrics:
              system.network.connections:
                enabled: false
          # Uncomment to enable process metrics, which can be noisy but valuable.
          # processes:
          # process:
          #   metrics:
          #     process.cpu.utilization:
          #       enabled: true
          #     process.cpu.time:
          #       enabled: false
          #   mute_process_name_error: true
          #   mute_process_exe_error: true
          #   mute_process_io_error: true
          #   mute_process_user_error: true

      kubeletstats:
        collection_interval: 1m
        endpoint: "${KUBE_NODE_NAME}:10250"
        auth_type: "serviceAccount"
        insecure_skip_verify: true
        metrics:
          k8s.container.cpu_limit_utilization:
            enabled: true

      prometheus:
        config:
          scrape_configs:
            - job_name: cadvisor
              scrape_interval: 1m
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - replacement: kubernetes.default.svc.cluster.local:443
                  target_label: __address__
                - regex: (.+)
                  replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
                  source_labels:
                    - __meta_kubernetes_node_name
                  target_label: __metrics_path__
                - action: replace
                  target_label: job_label
                  replacement: cadvisor
                - source_labels: [__meta_kubernetes_node_name]
                  regex: ${KUBE_NODE_NAME}
                  action: keep
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: false
                server_name: kubernetes
            - job_name: kubelet
              scrape_interval: 1m
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - replacement: kubernetes.default.svc.cluster.local:443
                  target_label: __address__
                - regex: (.+)
                  replacement: /api/v1/nodes/$${1}/proxy/metrics
                  source_labels:
                    - __meta_kubernetes_node_name
                  target_label: __metrics_path__
                - action: replace
                  target_label: job_label
                  replacement: kubelet
                - source_labels: [__meta_kubernetes_node_name]
                  regex: ${KUBE_NODE_NAME}
                  action: keep
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: false
                server_name: kubernetes

      filelog:
        include:
          - /var/log/pods/*/*/*.log
        exclude:
          # Exclude logs from opentelemetry containers
          # filelog paths for containerd and CRI-O
          - /var/log/pods/*/otel-collector-daemonset/*.log
          - /var/log/pods/*/otel-collector-deployment/*.log
          - /var/log/pods/*/containers/*-exec.log
          # konnectivity-agent is GKE specific (gke uses containerd as default)
          - /var/log/pods/*/konnectivity-agent/*.log
          # filelog paths for docker CRI
          - /var/log/container/otel-collector-daemonset/*.log
          - /var/log/container/otel-collector-deployment/*.log
          - /var/log/containers/*-exec.log
        include_file_path: true
        include_file_name: true
        operators:
        - id: container-parser
          type: container


    processors:
      
      

      groupbyattrs:
        keys:
          - pod
          - uid
          - container
          - daemonset
          - replicaset
          - statefulset
          - deployment
          - cronjob
          - configmap
          - job
          - job_name
          - horizontalpodautoscaler
          - persistentvolume
          - persistentvolumeclaim
          - endpoint
          - mutatingwebhookconfiguration
          - validatingwebhookconfiguration
          - lease
          - storageclass
          - secret
          - service
          - resourcequota
          - node
          - namespace

      transform/ksm:
        metric_statements:
          - delete_key(resource.attributes, "k8s.node.name")
          - delete_key(resource.attributes, "k8s.namespace.name")
          - delete_key(resource.attributes, "k8s.pod.uid")
          - delete_key(resource.attributes, "k8s.pod.name")
          - delete_key(resource.attributes, "k8s.container.name")
          - delete_key(resource.attributes, "k8s.replicaset.name")
          - delete_key(resource.attributes, "k8s.deployment.name")
          - delete_key(resource.attributes, "k8s.statefulset.name")
          - delete_key(resource.attributes, "k8s.daemonset.name")
          - delete_key(resource.attributes, "k8s.job.name")
          - delete_key(resource.attributes, "k8s.cronjob.name")
          - delete_key(resource.attributes, "k8s.replicationcontroller.name")
          - delete_key(resource.attributes, "k8s.hpa.name")
          - delete_key(resource.attributes, "k8s.resourcequota.name")
          - delete_key(resource.attributes, "k8s.volume.name")
          - set(resource.attributes["k8s.pod.uid"], resource.attributes["uid"])
          - set(resource.attributes["k8s.node.name"], resource.attributes["node"])
          - set(resource.attributes["k8s.namespace.name"], resource.attributes["namespace"])
          - set(resource.attributes["k8s.pod.name"], resource.attributes["pod"])
          - set(resource.attributes["k8s.container.name"], resource.attributes["container"])
          - set(resource.attributes["k8s.replicaset.name"], resource.attributes["replicaset"])
          - set(resource.attributes["k8s.deployment.name"], resource.attributes["deployment"])
          - set(resource.attributes["k8s.statefulset.name"], resource.attributes["statefulset"])
          - set(resource.attributes["k8s.daemonset.name"], resource.attributes["daemonset"])
          - set(resource.attributes["k8s.job.name"], resource.attributes["job_name"])
          - set(resource.attributes["k8s.cronjob.name"], resource.attributes["cronjob"])
          - set(resource.attributes["k8s.replicationcontroller.name"], resource.attributes["replicationcontroller"])
          - set(resource.attributes["k8s.hpa.name"], resource.attributes["horizontalpodautoscaler"])
          - set(resource.attributes["k8s.resourcequota.name"], resource.attributes["resourcequota"])
          - set(resource.attributes["k8s.volume.name"], resource.attributes["volumename"])
          - set(resource.attributes["k8s.volume.name"], resource.attributes["persistentvolume"])
          - set(resource.attributes["k8s.pvc.name"], resource.attributes["persistentvolumeclaim"])
          - delete_key(resource.attributes, "uid")
          - delete_key(resource.attributes, "node")
          - delete_key(resource.attributes, "namespace")
          - delete_key(resource.attributes, "pod")
          - delete_key(resource.attributes, "container")
          - delete_key(resource.attributes, "replicaset")
          - delete_key(resource.attributes, "deployment")
          - delete_key(resource.attributes, "statefulset")
          - delete_key(resource.attributes, "daemonset")
          - delete_key(resource.attributes, "job_name")
          - delete_key(resource.attributes, "cronjob")
          - delete_key(resource.attributes, "replicationcontroller")
          - delete_key(resource.attributes, "horizontalpodautoscaler")
          - delete_key(resource.attributes, "resourcequota")
          - delete_key(resource.attributes, "volumename")
          - delete_key(resource.attributes, "persistentvolume")
          - delete_key(resource.attributes, "persistentvolumeclaim")


      metricstransform/ldm:
        transforms:
          - include: .*
            match_type: regexp
            action: update
            operations:
            - action: add_label
              new_label: low.data.mode
              new_value: 'false'

      metricstransform/kubeletstats:
        transforms:
          - include: container\.(cpu\.usage|filesystem\.(available|capacity|usage)|memory\.usage)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: k8s\.node\.(cpu\.(time|usage)|filesystem\.(capacity|usage)|memory\.(available|working_set))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: k8s\.pod\.(filesystem\.(available|capacity|usage)|memory\.working_set|network\.io)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'

      metricstransform/cadvisor:
        transforms:
          - include: container_cpu_(cfs_(periods_total|throttled_periods_total)|usage_seconds_total)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: container_memory_working_set_bytes
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: container_memory_mapped_file
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: container_network_(working_set_bytes|receive_(bytes_total|errors_total)|transmit_(bytes_total|errors_total))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: container_spec_memory_limit_bytes
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'

      metricstransform/kubelet:
        transforms:
          - include: go_(goroutines|threads)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: process_resident_memory_bytes
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'

      metricstransform/hostmetrics:
        transforms:
          - include: process\.(cpu\.utilization|disk\.io|memory\.(usage|virtual))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: system\.cpu\.(utilization|load_average\.(15m|1m|5m))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: system\.disk\.(io_time|operation_time|operations)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: system\.(filesystem|memory)\.(usage|utilization)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: system\.network\.(errors|io|packets)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'


      filter/exclude_metrics_low_data_mode:
        metrics:
          metric:
            - 'HasAttrOnDatapoint("low.data.mode", "false")'

      transform/truncate:
        log_statements:
          - context: log
            statements:
              - truncate_all(attributes, 4095)
              - truncate_all(resource.attributes, 4095)

      # group system.cpu metrics by cpu
      metricstransform/hostmetrics_cpu:
        transforms:
          - include: system.cpu.utilization
            action: update
            operations:
              - action: aggregate_labels
                label_set: [ state ]
                aggregation_type: mean
          - include: system.paging.operations
            action: update
            operations:
              - action: aggregate_labels
                label_set: [ direction ]
                aggregation_type: sum

      # following system.% metrics reduce metrics reported by hostmetrics receiver
      filter/exclude_cpu_utilization:
        metrics:
          datapoint:
            - 'metric.name == "system.cpu.utilization" and attributes["state"] == "interrupt"'
            - 'metric.name == "system.cpu.utilization" and attributes["state"] == "nice"'
            - 'metric.name == "system.cpu.utilization" and attributes["state"] == "softirq"'
      filter/exclude_memory_utilization:
        metrics:
          datapoint:
            - 'metric.name == "system.memory.utilization" and attributes["state"] == "slab_unreclaimable"'
            - 'metric.name == "system.memory.utilization" and attributes["state"] == "inactive"'
            - 'metric.name == "system.memory.utilization" and attributes["state"] == "cached"'
            - 'metric.name == "system.memory.utilization" and attributes["state"] == "buffered"'
            - 'metric.name == "system.memory.utilization" and attributes["state"] == "slab_reclaimable"'
      filter/exclude_memory_usage:
        metrics:
          datapoint:
            - 'metric.name == "system.memory.usage" and attributes["state"] == "slab_unreclaimable"'
            - 'metric.name == "system.memory.usage" and attributes["state"] == "inactive"'
      filter/exclude_filesystem_utilization:
        metrics:
          datapoint:
            - 'metric.name == "system.filesystem.utilization" and attributes["type"] == "squashfs"'
      filter/exclude_filesystem_usage:
        metrics:
          datapoint:
            - 'metric.name == "system.filesystem.usage" and attributes["type"] == "squashfs"'
            - 'metric.name == "system.filesystem.usage" and attributes["state"] == "reserved"'
      filter/exclude_filesystem_inodes_usage:
        metrics:
          datapoint:
            - 'metric.name == "system.filesystem.inodes.usage" and attributes["type"] == "squashfs"'
            - 'metric.name == "system.filesystem.inodes.usage" and attributes["state"] == "reserved"'
      filter/exclude_system_disk:
        metrics:
          datapoint:
            - 'metric.name == "system.disk.operations" and IsMatch(attributes["device"], "^loop.*") == true'
            - 'metric.name == "system.disk.merged" and IsMatch(attributes["device"], "^loop.*") == true'
            - 'metric.name == "system.disk.io" and IsMatch(attributes["device"], "^loop.*") == true'
            - 'metric.name == "system.disk.io_time" and IsMatch(attributes["device"], "^loop.*") == true'
            - 'metric.name == "system.disk.operation_time" and IsMatch(attributes["device"], "^loop.*") == true'
      filter/exclude_system_paging:
        metrics:
          datapoint:
            - 'metric.name == "system.paging.usage" and attributes["state"] == "cached"'
            - 'metric.name == "system.paging.operations" and attributes["type"] == "cached"'
      filter/exclude_network:
        metrics:
          datapoint:
            - 'IsMatch(metric.name, "^system.network.*") == true and attributes["device"] == "lo"'

      filter/nr_exclude_container_zero_values:
        metrics:
          datapoint:
            - metric.name == "container_network_receive_errors_total" and value_double < 0.5
            - metric.name == "container_network_transmit_errors_total" and value_double < 0.5
            - metric.name == "container_network_transmit_bytes_total" and value_double < 0.5
            - metric.name == "container_network_receive_bytes_total" and value_double < 0.5


      attributes/exclude_system_paging:
        include:
          match_type: strict
          metric_names:
            - system.paging.operations
        actions:
          - key: type
            action: delete

      resourcedetection/env:
        detectors: ["env", "system"]
        override: false
        system:
          hostname_sources: ["os"]
          resource_attributes:
            host.name:
              enabled: false

      resourcedetection/cloudproviders:
        detectors: [gcp, eks, ec2, aks, azure]
        timeout: 2s
        override: false

      resource/newrelic:
        attributes:
          # We set the cluster name to what the customer specified in the helm chart
          - key: k8s.cluster.name
            action: upsert
            value: <cluser_name>
          - key: newrelicOnly
            action: upsert
            value: 'true'
          - key: "newrelic.chart.version"
            action: upsert
            value: 0.8.34
          - key: service.name
            action: delete
          - key: service_name
            action: delete

      transform/low_data_mode_inator:
        metric_statements:
          - context: metric
            statements:
              - set(description, "")
              - set(unit, "")
          - context: datapoint
            statements:
              - delete_key(attributes, "id")
              - delete_key(attributes, "name")
              - delete_key(attributes, "interface")
              - delete_key(attributes, "cpu")

      resource/low_data_mode_inator:
        attributes:
          - key: http.scheme
            action: delete
          - key: net.host.name
            action: delete
          - key: net.host.port
            action: delete
          - key: url.scheme
            action: delete
          - key: server.address
            action: delete

      memory_limiter:
         check_interval: 1s
         limit_percentage: 80
         spike_limit_percentage: 25

      cumulativetodelta:

      k8sattributes/ksm:
        # Metadata attached by this processor is reliant on the uid & pod name. This would be sufficient for most types
        # of metrics but there are cases of metrics where a uid would not be present and thus metadata would
        # not be attached. To address cases like these, metadata attributes must be annotated in a different manner
        # such as by preserving some of the attributes presented by KSM.
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.deployment.name
            - k8s.daemonset.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
            - k8s.replicaset.name
            - k8s.statefulset.name
            - k8s.cronjob.name
            - k8s.job.name
        pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.uid
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

    exporters:
      
      

      otlphttp/newrelic:
        endpoint: "https://otlp.nr-data.net"
        headers:
          api-key: ${env:NR_LICENSE_KEY}

    connectors:
      

      routing/nr_logs_pipelines:
        default_pipelines: [logs/pipeline]
        table:
          - context: datapoint
            condition: "true"
            pipelines: [logs/pipeline]

      routing/logs_egress:
        default_pipelines: [logs/egress]
        table:
          - context: datapoint
            condition: "true"
            pipelines: [logs/egress]

      routing/metrics_egress:
        default_pipelines: [metrics/egress]
        table:
          - context: metric
            condition: "true"
            pipelines: [metrics/egress]

      routing/nr_metrics_pipelines:
        default_pipelines: [metrics/default]
        error_mode: propagate
        table:
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/networkscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/loadscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/diskscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/memoryscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/cpuscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/filesystemscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/pagingscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver"
            pipelines: [metrics/nr_prometheus_cadv_kubelet]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver"
            pipelines: [metrics/nr]

    service:
      pipelines:
        
        metrics/ingress:
          receivers:
            - hostmetrics
            - kubeletstats
            - prometheus
          processors:
            
          exporters:
            - routing/nr_metrics_pipelines
            

        metrics/nr:
          receivers:
            - routing/nr_metrics_pipelines
          processors:
            - memory_limiter
            - metricstransform/ldm
            - metricstransform/kubeletstats
            - metricstransform/cadvisor
            - metricstransform/kubelet
            - metricstransform/hostmetrics
            - filter/exclude_metrics_low_data_mode
            - metricstransform/hostmetrics_cpu
            - transform/truncate
            - filter/exclude_cpu_utilization
            - filter/exclude_memory_utilization
            - filter/exclude_memory_usage
            - filter/exclude_filesystem_utilization
            - filter/exclude_filesystem_usage
            - filter/exclude_filesystem_inodes_usage
            - filter/exclude_system_disk
            - filter/exclude_system_paging
            - filter/exclude_network
            - attributes/exclude_system_paging
            - resourcedetection/env
            - resourcedetection/cloudproviders
            - resource/newrelic
            - transform/low_data_mode_inator
            - resource/low_data_mode_inator
            - k8sattributes/ksm
            - cumulativetodelta
          exporters:
            - routing/metrics_egress
        metrics/nr_prometheus_cadv_kubelet:
          receivers:
            - routing/nr_metrics_pipelines
          processors:
            - memory_limiter
            - metricstransform/ldm
            - metricstransform/cadvisor
            - metricstransform/kubelet
            - filter/exclude_metrics_low_data_mode
            - filter/nr_exclude_container_zero_values
            - transform/truncate
            - resourcedetection/env
            - resourcedetection/cloudproviders
            - resource/newrelic
            - transform/low_data_mode_inator
            - resource/low_data_mode_inator
            - groupbyattrs
            - transform/ksm
            - k8sattributes/ksm
            - cumulativetodelta
          exporters:
            - routing/metrics_egress
        metrics/default:
          receivers:
            - routing/nr_metrics_pipelines
          processors:
            - memory_limiter
          exporters:
            - routing/metrics_egress
        metrics/egress:
          receivers:
            - routing/metrics_egress
          processors:
            
            - batch
          exporters:
            - otlphttp/newrelic
            
        logs/ingress:
          receivers:
            - filelog
          processors:
            
          exporters:
            - routing/nr_logs_pipelines
            

        logs/pipeline:
          receivers:
            - routing/nr_logs_pipelines
          processors:
            - memory_limiter
            - transform/truncate
            - resource/newrelic
            - k8sattributes/ksm
          exporters:
            - routing/logs_egress

        logs/egress:
          receivers:
            - routing/logs_egress
          processors:
            
            - batch
          exporters:
            - otlphttp/newrelic
