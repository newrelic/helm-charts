---
# Source: nr-k8s-otel-collector/templates/deployment-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-nr-k8s-otel-collector-deployment-config
  namespace: default
  labels:
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nr-k8s-otel-collector
    app.kubernetes.io/version: 1.0.3
    helm.sh/chart: nr-k8s-otel-collector-0.8.10
data:
  deployment-config.yaml: |
    receivers:
      otlp:
        protocols:
          http:
            endpoint: ${env:MY_POD_IP}:4318
      k8s_events:
      prometheus/ksm:
        config:
          scrape_configs: 
            - job_name: kube-state-metrics
              scrape_interval: 1m
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - action: keep
                  regex: kube-state-metrics
                  source_labels:
                    - __meta_kubernetes_pod_label_app_kubernetes_io_name
                - action: replace
                  target_label: job_label
                  replacement: kube-state-metrics

      prometheus/controlplane:
        config:
          scrape_configs:
            - job_name: apiserver
              scrape_interval: 1m
              kubernetes_sd_configs:
                - role: endpoints
                  namespaces:
                    names:
                      - default
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: false
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              relabel_configs:
              - action: keep
                regex: default;kubernetes;https
                source_labels:
                - __meta_kubernetes_namespace
                - __meta_kubernetes_service_name
                - __meta_kubernetes_endpoint_port_name
              - action: replace
                source_labels:
                - __meta_kubernetes_namespace
                target_label: namespace
              - action: replace
                source_labels:
                - __meta_kubernetes_service_name
                target_label: service
              - action: replace
                target_label: job_label
                replacement: apiserver

    processors:
      groupbyattrs:
        keys:
          - pod
          - container
          - daemonset
          - replicaset
          - statefulset
          - deployment
          - cronjob
          - configmap
          - job
          - job_name
          - horizontalpodautoscaler
          - persistentvolume
          - persistentvolumeclaim
          - endpoint
          - mutatingwebhookconfiguration
          - validatingwebhookconfiguration
          - lease
          - storageclass
          - secret
          - service
          - resourcequota
          - node
          - namespace

      transform/ksm:
        metric_statements:
          - context: resource
            statements:
              - delete_key(attributes, "k8s.node.name")
              - delete_key(attributes, "k8s.namespace.name")
              - delete_key(attributes, "k8s.pod.uid")
              - delete_key(attributes, "k8s.pod.name")
              - delete_key(attributes, "k8s.container.name")
              - delete_key(attributes, "k8s.replicaset.name")
              - delete_key(attributes, "k8s.deployment.name")
              - delete_key(attributes, "k8s.statefulset.name")
              - delete_key(attributes, "k8s.daemonset.name")
              - delete_key(attributes, "k8s.job.name")
              - delete_key(attributes, "k8s.cronjob.name")
              - delete_key(attributes, "k8s.replicationcontroller.name")
              - delete_key(attributes, "k8s.hpa.name")
              - delete_key(attributes, "k8s.resourcequota.name")
              - delete_key(attributes, "k8s.volume.name")
              - set(attributes["k8s.uid.uid"], attributes["uid"])
              - set(attributes["k8s.node.name"], attributes["node"])
              - set(attributes["k8s.namespace.name"], attributes["namespace"])
              - set(attributes["k8s.pod.name"], attributes["pod"])
              - set(attributes["k8s.container.name"], attributes["container"])
              - set(attributes["k8s.replicaset.name"], attributes["replicaset"])
              - set(attributes["k8s.deployment.name"], attributes["deployment"])
              - set(attributes["k8s.statefulset.name"], attributes["statefulset"])
              - set(attributes["k8s.daemonset.name"], attributes["daemonset"])
              - set(attributes["k8s.job.name"], attributes["job_name"])
              - set(attributes["k8s.cronjob.name"], attributes["cronjob"])
              - set(attributes["k8s.replicationcontroller.name"], attributes["replicationcontroller"])
              - set(attributes["k8s.hpa.name"], attributes["horizontalpodautoscaler"])
              - set(attributes["k8s.resourcequota.name"], attributes["resourcequota"])
              - set(attributes["k8s.volume.name"], attributes["volumename"])
              - set(attributes["k8s.volume.name"], attributes["persistentvolume"])
              - set(attributes["k8s.pvc.name"], attributes["persistentvolumeclaim"])
              - delete_key(attributes, "node")
              - delete_key(attributes, "namespace")
              - delete_key(attributes, "pod")
              - delete_key(attributes, "container")
              - delete_key(attributes, "replicaset")
              - delete_key(attributes, "deployment")
              - delete_key(attributes, "statefulset")
              - delete_key(attributes, "daemonset")
              - delete_key(attributes, "job_name")
              - delete_key(attributes, "cronjob")
              - delete_key(attributes, "replicationcontroller")
              - delete_key(attributes, "horizontalpodautoscaler")
              - delete_key(attributes, "resourcequota")
              - delete_key(attributes, "volumename")
              - delete_key(attributes, "persistentvolume")
              - delete_key(attributes, "persistentvolumeclaim")

      metricstransform/k8s_cluster_info:
        transforms:
          - include: kubernetes_build_info
            action: update
            new_name: k8s.cluster.info 

      metricstransform/kube_pod_status_phase:
        transforms:
          - include: 'kube_pod_container_status_waiting'
            match_type: strict 
            action: update
            new_name: 'kube_pod_container_status_phase'
            operations:
            - action: add_label
              new_label: container_phase
              new_value: waiting 
          - include: 'kube_pod_container_status_running'
            match_type: strict
            action: update
            new_name: 'kube_pod_container_status_phase'
            operations:
            - action: add_label
              new_label: container_phase
              new_value: running 
          - include: 'kube_pod_container_status_terminated'
            match_type: strict
            action: update
            new_name: 'kube_pod_container_status_phase'
            operations:
            - action: add_label
              new_label: container_phase
              new_value: terminated 

      metricstransform/ldm:
        transforms:
          - include: .*
            match_type: regexp
            action: update
            operations:
            - action: add_label
              new_label: low.data.mode
              new_value: 'false'
      
      metricstransform/k8s_cluster_info_ldm:
        transforms:
          - include: k8s.cluster.info
            action: update
            operations: 
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'

      metricstransform/ksm:
        transforms:
          - include: kube_cronjob_(created|spec_suspend|status_(active|last_schedule_time))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_daemonset_(created|status_(current_number_scheduled|desired_number_scheduled|updated_number_scheduled)|status_number_(available|misscheduled|ready|unavailable))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_deployment_(created|metadata_generation|spec_(replicas|strategy_rollingupdate_max_surge)|status_(condition|observed_generation|replicas)|status_replicas_(available|ready|unavailable|updated))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_horizontalpodautoscaler_(spec_(max_replicas|min_replicas)|status_(condition|current_replicas|desired_replicas))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_job_(owner|complete|created|failed|spec_(active_deadline_seconds|completions|parallelism)|status_(active|completion_time|failed|start_time|succeeded))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_node_status_(allocatable|condition)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_persistentvolume_(capacity_bytes|created|info|status_phase)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_persistentvolumeclaim_(created|info|resource_requests_storage_bytes|status_phase)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_pod_container_(info|resource_(limits|requests)|status_(phase|ready|restarts_total|waiting_reason))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_pod_(owner|created|info|status_(phase|ready|ready_time|scheduled|scheduled_time))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_service_(annotations|created|info|labels|spec_type|status_load_balancer_ingress)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_statefulset_(created|persistentvolumeclaim_retention_policy|replicas|status_(current_revision|replicas)|status_replicas_(available|current|ready|updated))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: kube_(replicaset_owner)
            action: update
            match_type: regexp
            operations:
              - action: update_label
                label: low.data.mode
                value_actions:
                  - value: 'false'
                    new_value: 'true'
      
      metricstransform/apiserver:
        transforms:
          - include: apiserver_storage_objects
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: go_(goroutines|threads)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: process_resident_memory_bytes
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
    
      filter/exclude_metrics_low_data_mode:
        metrics:
          metric:
            - 'HasAttrOnDatapoint("low.data.mode", "false")'

      filter/exclude_zero_value_kube_node_status_condition:
        metrics:
          datapoint:
            - metric.name == "kube_node_status_condition" and value_double == 0.0

      filter/exclude_zero_value_kube_persistentvolumeclaim_status_phase:
        metrics:
          datapoint:
            - metric.name == "kube_persistentvolumeclaim_status_phase" and value_double == 0.0

      filter/exclude_zero_value_kube_pod_status_phase:
        metrics:
          datapoint:
            - metric.name == "kube_pod_status_phase" and value_double == 0.0

      filter/exclude_zero_value_kube_pod_container_status:
        metrics:
          datapoint:
            - metric.name == "kube_pod_container_status" and value_double == 0.0

      resource/metrics:
        attributes:
          # We set the cluster name to what the customer specified in the helm chart
          - key: k8s.cluster.name
            action: upsert
            value: DEMO_CLUSTER
          - key: newrelicOnly
            action: upsert
            value: 'true'
          - key: "newrelic.chart.version"
            action: upsert
            value: 0.8.10
          - key: service.name
            action: delete
          - key: service_name
            action: delete
      
      resource/events:
        attributes:
          - key: "event.name"
            action: upsert
            value: "InfrastructureEvent"
          - key: "event.domain"
            action: upsert
            value: "newrelic-otel-event"
          - key: "category"
            action: upsert
            value: "kubernetes"
          - key: k8s.cluster.name
            action: upsert
            value: DEMO_CLUSTER
          - key: newrelicOnly
            action: upsert
            value: 'true'
          - key: "newrelic.chart.version"
            action: upsert
            value: 0.8.10

      transform/events:
        log_statements:
          - context: log
            statements:
              - set(attributes["event.source.host"], resource.attributes["k8s.node.name"])

      transform/low_data_mode_inator:
        metric_statements:
          - context: metric
            statements:
              - set(description, "")
              - set(unit, "")

      resource/low_data_mode_inator:
        attributes:
          - key: http.scheme
            action: delete
          - key: net.host.name
            action: delete
          - key: net.host.port
            action: delete

      cumulativetodelta:

      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.daemonset.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
        pod_association:
          - sources: 
            - from: resource_attribute
              name: k8s.pod.uid

      attributes/self:
        actions:
          - key: k8s.node.name
            action: upsert
            from_attribute: node
          - key: k8s.namespace.name
            action: upsert
            from_attribute: namespace
          - key: k8s.pod.name
            action: upsert
            from_attribute: pod
          - key: k8s.container.name
            action: upsert
            from_attribute: container
          - key: k8s.replicaset.name
            action: upsert
            from_attribute: replicaset
          - key: k8s.deployment.name
            action: upsert
            from_attribute: deployment
          - key: k8s.statefulset.name
            action: upsert
            from_attribute: statefulset
          - key: k8s.daemonset.name
            action: upsert
            from_attribute: daemonset
          - key: k8s.job.name
            action: upsert
            from_attribute: job_name
          - key: k8s.cronjob.name
            action: upsert
            from_attribute: cronjob
          - key: k8s.replicationcontroller.name
            action: upsert
            from_attribute: replicationcontroller
          - key: k8s.hpa.name
            action: upsert
            from_attribute: horizontalpodautoscaler
          - key: k8s.resourcequota.name
            action: upsert
            from_attribute: resourcequota
          - key: k8s.volume.name
            action: upsert
            from_attribute: volumename
          - key: k8s.volume.name
            action: upsert
            from_attribute: persistentvolume
          - key: k8s.pvc.name
            action: upsert
            from_attribute: persistentvolumeclaim
          - key: node
            action: delete
          - key: namespace
            action: delete
          - key: pod
            action: delete
          - key: container
            action: delete
          - key: replicaset
            action: delete
          - key: deployment
            action: delete
          - key: statefulset
            action: delete
          - key: daemonset
            action: delete
          - key: job_name
            action: delete
          - key: cronjob
            action: delete
          - key: replicationcontroller
            action: delete
          - key: horizontalpodautoscaler
            action: delete
          - key: resourcequota
            action: delete
          - key: volumename
            action: delete
          - key: persistentvolume
            action: delete
          - key: persistentvolumeclaim
            action: delete

      memory_limiter:
         check_interval: 1s
         limit_percentage: 80
         spike_limit_percentage: 25

      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

    exporters:
      otlphttp/newrelic:
        endpoint: "https://otlp.nr-data.net"
        headers:
          api-key: ${env:NR_LICENSE_KEY}
      debug:
        verbosity: detailed
        sampling_initial: 5
        sampling_thereafter: 200

    service:
      pipelines:
        metrics/ksm:
          receivers:
            - prometheus/ksm
          processors:
            - memory_limiter
            - metricstransform/kube_pod_status_phase
            - filter/exclude_zero_value_kube_node_status_condition
            - filter/exclude_zero_value_kube_persistentvolumeclaim_status_phase
            - filter/exclude_zero_value_kube_pod_status_phase
            - filter/exclude_zero_value_kube_pod_container_status
            - metricstransform/ldm
            - metricstransform/k8s_cluster_info_ldm
            - metricstransform/ksm
            - filter/exclude_metrics_low_data_mode
            - transform/low_data_mode_inator
            - resource/low_data_mode_inator
            - resource/metrics
            - groupbyattrs
            - transform/ksm
            - attributes/self
            - batch
          exporters:
            - otlphttp/newrelic
        metrics:
          receivers:
            - prometheus/controlplane
          processors:
            - memory_limiter
            - metricstransform/k8s_cluster_info
            - metricstransform/ldm
            - metricstransform/k8s_cluster_info_ldm
            - metricstransform/apiserver
            - filter/exclude_metrics_low_data_mode
            - transform/low_data_mode_inator
            - resource/low_data_mode_inator
            - resource/metrics
            - attributes/self
            - k8sattributes
            - cumulativetodelta
            - batch
          exporters:
            - otlphttp/newrelic
        logs/events:
          receivers:
            - k8s_events
          processors:
            - memory_limiter
            - transform/events
            - resource/events
            - batch
          exporters:
            - otlphttp/newrelic
