apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nrKubernetesOtel.daemonset.configMap.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
data:
  daemonset-config.yaml: |
    {{- with include "nrKubernetesOtel.daemonset.configMap.overrideConfig" . }}
    {{- . | nindent 4 }}
    {{- else }}
    receivers:
      {{- include "nrKubernetesOtel.daemonset.configMap.extraConfig.receivers" . | nindent 6 }}
      hostmetrics/nr:
        # TODO (chris): this is a linux specific configuration
        {{- if not .Values.gkeAutopilot }}
        root_path: /hostfs
        {{- end }}
        collection_interval: {{ .Values.receivers.hostmetrics.scrapeInterval }}
        scrapers:
          cpu:
            metrics:
              system.cpu.time:
                enabled: false
              system.cpu.utilization:
                enabled: true
          load:
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
          paging:
            metrics:
              system.paging.utilization:
                enabled: false
              system.paging.faults:
                enabled: false
          filesystem:
            metrics:
              system.filesystem.utilization:
                enabled: true
          disk:
            metrics:
              system.disk.merged:
                enabled: false
              system.disk.pending_operations:
                enabled: false
              system.disk.weighted_io_time:
                enabled: false
          network:
            metrics:
              system.network.connections:
                enabled: false
          # Uncomment to enable process metrics, which can be noisy but valuable.
          # processes:
          # process:
          #   metrics:
          #     process.cpu.utilization:
          #       enabled: true
          #     process.cpu.time:
          #       enabled: false
          #   mute_process_name_error: true
          #   mute_process_exe_error: true
          #   mute_process_io_error: true
          #   mute_process_user_error: true

      kubeletstats/nr:
        collection_interval: {{ .Values.receivers.kubeletstats.scrapeInterval }}
        {{- if not .Values.gkeAutopilot }}
        endpoint: "${KUBE_NODE_NAME}:10250"
        auth_type: "serviceAccount"
        insecure_skip_verify: true
        {{- else }}
        endpoint: "${KUBE_NODE_NAME}:10255"
        auth_type: "none"
        {{- end }}
        metrics:
          k8s.container.cpu_limit_utilization:
            enabled: true

      prometheus/nr:
        config:
          scrape_configs:
            - job_name: cadvisor
              scrape_interval: {{ .Values.receivers.prometheus.scrapeInterval }}
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - replacement: kubernetes.default.svc.cluster.local:443
                  target_label: __address__
                - regex: (.+)
                  replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
                  source_labels:
                    - __meta_kubernetes_node_name
                  target_label: __metrics_path__
                - action: replace
                  target_label: job_label
                  replacement: cadvisor
                - source_labels: [__meta_kubernetes_node_name]
                  regex: ${KUBE_NODE_NAME}
                  action: keep
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: false
                server_name: kubernetes
            - job_name: kubelet
              scrape_interval: {{ .Values.receivers.prometheus.scrapeInterval }}
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - replacement: kubernetes.default.svc.cluster.local:443
                  target_label: __address__
                - regex: (.+)
                  replacement: /api/v1/nodes/$${1}/proxy/metrics
                  source_labels:
                    - __meta_kubernetes_node_name
                  target_label: __metrics_path__
                - action: replace
                  target_label: job_label
                  replacement: kubelet
                - source_labels: [__meta_kubernetes_node_name]
                  regex: ${KUBE_NODE_NAME}
                  action: keep
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: false
                server_name: kubernetes

      filelog/nr:
        include:
          - /var/log/pods/*/*/*.log
        exclude:
          # Exclude logs from opentelemetry containers
          # filelog paths for containerd and CRI-O
          - /var/log/pods/*/otel-collector-daemonset/*.log
          - /var/log/pods/*/otel-collector-deployment/*.log
          - /var/log/pods/*/containers/*-exec.log
          # konnectivity-agent is GKE specific (gke uses containerd as default)
          - /var/log/pods/*/konnectivity-agent/*.log
          # filelog paths for docker CRI
          - /var/log/container/otel-collector-daemonset/*.log
          - /var/log/container/otel-collector-deployment/*.log
          - /var/log/containers/*-exec.log
        start_at: beginning
        include_file_path: true
        include_file_name: true
        operators:
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # CRI-O format
          - type: regex_parser
            id: parser-crio
            regex:
              '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.999999999Z07:00'
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex:
              '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          - type: move
            from: attributes.log
            to: body
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
            cache:
              size: 128
          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]

    processors:
      {{- include "nrKubernetesOtel.daemonset.configMap.extraConfig.processors" . | nindent 6 }}

      metricstransform/nr_ldm:
        transforms:
          - include: .*
            match_type: regexp
            action: update
            operations:
            - action: add_label
              new_label: low.data.mode
              new_value: 'false'

      metricstransform/nr_kubeletstats:
        transforms:
          - include: container\.(cpu\.usage|filesystem\.(capacity|usage)|memory\.usage)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: k8s\.node\.(cpu\.(time|usage)|filesystem\.(capacity|usage)|memory\.(available|working_set))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: k8s\.pod\.(filesystem\.(available|capacity|usage)|memory\.working_set|network\.io)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'

      metricstransform/nr_cadvisor:
        transforms:
          - include: container_cpu_(cfs_(periods_total|throttled_periods_total)|usage_seconds_total)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: container_memory_working_set_bytes
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: container_network_(working_set_bytes|receive_(bytes_total|errors_total)|transmit_(bytes_total|errors_total))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: container_spec_memory_limit_bytes
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'

      metricstransform/nr_kubelet:
        transforms:
          - include: go_(goroutines|threads)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: process_resident_memory_bytes
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'

      metricstransform/nr_hostmetrics:
        transforms:
          - include: process\.(cpu\.utilization|disk\.io|memory\.(usage|virtual))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: system\.cpu\.(utilization|load_average\.(15m|1m|5m))
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: system\.disk\.(io_time|operation_time|operations)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: system\.(filesystem|memory)\.(usage|utilization)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'
          - include: system\.network\.(errors|io|packets)
            action: update
            match_type: regexp
            operations:
            - action: update_label
              label: low.data.mode
              value_actions:
              - value: 'false'
                new_value: 'true'


      filter/nr_exclude_metrics_low_data_mode:
        metrics:
          metric:
            - 'HasAttrOnDatapoint("low.data.mode", "false")'

      transform/nr_truncate:
        log_statements:
          - context: log
            statements:
              - truncate_all(attributes, 4095)
              - truncate_all(resource.attributes, 4095)

      # group system.cpu metrics by cpu
      metricstransform/nr_hostmetrics_cpu:
        transforms:
          - include: system.cpu.utilization
            action: update
            operations:
              - action: aggregate_labels
                label_set: [ state ]
                aggregation_type: mean
          - include: system.paging.operations
            action: update
            operations:
              - action: aggregate_labels
                label_set: [ direction ]
                aggregation_type: sum

      # following system.% metrics reduce metrics reported by hostmetrics receiver
      filter/nr_exclude_cpu_utilization:
        metrics:
          datapoint:
            - 'metric.name == "system.cpu.utilization" and attributes["state"] == "interrupt"'
            - 'metric.name == "system.cpu.utilization" and attributes["state"] == "nice"'
            - 'metric.name == "system.cpu.utilization" and attributes["state"] == "softirq"'
      filter/nr_exclude_memory_utilization:
        metrics:
          datapoint:
            - 'metric.name == "system.memory.utilization" and attributes["state"] == "slab_unreclaimable"'
            - 'metric.name == "system.memory.utilization" and attributes["state"] == "inactive"'
            - 'metric.name == "system.memory.utilization" and attributes["state"] == "cached"'
            - 'metric.name == "system.memory.utilization" and attributes["state"] == "buffered"'
            - 'metric.name == "system.memory.utilization" and attributes["state"] == "slab_reclaimable"'
      filter/nr_exclude_memory_usage:
        metrics:
          datapoint:
            - 'metric.name == "system.memory.usage" and attributes["state"] == "slab_unreclaimable"'
            - 'metric.name == "system.memory.usage" and attributes["state"] == "inactive"'
      filter/nr_exclude_filesystem_utilization:
        metrics:
          datapoint:
            - 'metric.name == "system.filesystem.utilization" and attributes["type"] == "squashfs"'
      filter/nr_exclude_filesystem_usage:
        metrics:
          datapoint:
            - 'metric.name == "system.filesystem.usage" and attributes["type"] == "squashfs"'
            - 'metric.name == "system.filesystem.usage" and attributes["state"] == "reserved"'
      filter/nr_exclude_filesystem_inodes_usage:
        metrics:
          datapoint:
            - 'metric.name == "system.filesystem.inodes.usage" and attributes["type"] == "squashfs"'
            - 'metric.name == "system.filesystem.inodes.usage" and attributes["state"] == "reserved"'
      filter/nr_exclude_system_disk:
        metrics:
          datapoint:
            - 'metric.name == "system.disk.operations" and IsMatch(attributes["device"], "^loop.*") == true'
            - 'metric.name == "system.disk.merged" and IsMatch(attributes["device"], "^loop.*") == true'
            - 'metric.name == "system.disk.io" and IsMatch(attributes["device"], "^loop.*") == true'
            - 'metric.name == "system.disk.io_time" and IsMatch(attributes["device"], "^loop.*") == true'
            - 'metric.name == "system.disk.operation_time" and IsMatch(attributes["device"], "^loop.*") == true'
      filter/nr_exclude_system_paging:
        metrics:
          datapoint:
            - 'metric.name == "system.paging.usage" and attributes["state"] == "cached"'
            - 'metric.name == "system.paging.operations" and attributes["type"] == "cached"'
      filter/nr_exclude_network:
        metrics:
          datapoint:
            - 'IsMatch(metric.name, "^system.network.*") == true and attributes["device"] == "lo"'

      attributes/nr_exclude_system_paging:
        include:
          match_type: strict
          metric_names:
            - system.paging.operations
        actions:
          - key: type
            action: delete

      resourcedetection/nr_cloudproviders:
        detectors: [gcp, eks, ec2, aks, azure]
        timeout: 2s
        override: false

      resource/nr:
        attributes:
          # We set the cluster name to what the customer specified in the helm chart
          - key: k8s.cluster.name
            action: upsert
            value: {{ include "newrelic.common.cluster" . }}
          - key: newrelicOnly
            action: upsert
            value: 'true'
          - key: "newrelic.chart.version"
            action: upsert
            value: {{ .Chart.Version }}
          - key: service.name
            action: delete
          - key: service_name
            action: delete

      transform/nr_low_data_mode_inator:
        metric_statements:
          - context: metric
            statements:
              - set(description, "")
              - set(unit, "")
          - context: datapoint
            statements:
              - delete_key(attributes, "id")
              - delete_key(attributes, "name")
              - delete_key(attributes, "interface")

      resource/nr_low_data_mode_inator:
        attributes:
          - key: http.scheme
            action: delete
          - key: net.host.name
            action: delete
          - key: net.host.port
            action: delete

      attributes/nr_self:
        actions:
          - key: k8s.node.name
            action: upsert
            from_attribute: node
          - key: k8s.namespace.name
            action: upsert
            from_attribute: namespace
          - key: k8s.pod.name
            action: upsert
            from_attribute: pod
          - key: k8s.container.name
            action: upsert
            from_attribute: container
          - key: k8s.replicaset.name
            action: upsert
            from_attribute: replicaset
          - key: k8s.deployment.name
            action: upsert
            from_attribute: deployment
          - key: k8s.statefulset.name
            action: upsert
            from_attribute: statefulset
          - key: k8s.daemonset.name
            action: upsert
            from_attribute: daemonset
          - key: k8s.job.name
            action: upsert
            from_attribute: job_name
          - key: k8s.cronjob.name
            action: upsert
            from_attribute: cronjob
          - key: k8s.replicationcontroller.name
            action: upsert
            from_attribute: replicationcontroller
          - key: k8s.hpa.name
            action: upsert
            from_attribute: horizontalpodautoscaler
          - key: k8s.resourcequota.name
            action: upsert
            from_attribute: resourcequota
          - key: k8s.volume.name
            action: upsert
            from_attribute: volumename
          - key: k8s.volume.name
            action: upsert
            from_attribute: persistentvolume
          - key: k8s.pvc.name
            action: upsert
            from_attribute: persistentvolumeclaim
          - key: node
            action: delete
          - key: namespace
            action: delete
          - key: pod
            action: delete
          - key: container
            action: delete
          - key: replicaset
            action: delete
          - key: deployment
            action: delete
          - key: statefulset
            action: delete
          - key: daemonset
            action: delete
          - key: job_name
            action: delete
          - key: cronjob
            action: delete
          - key: replicationcontroller
            action: delete
          - key: horizontalpodautoscaler
            action: delete
          - key: resourcequota
            action: delete
          - key: volumename
            action: delete
          - key: persistentvolume
            action: delete
          - key: persistentvolumeclaim
            action: delete

      k8sattributes/nr:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.daemonset.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
        pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.uid

      memory_limiter/nr:
         check_interval: 1s
         limit_percentage: 80
         spike_limit_percentage: 25

      cumulativetodelta/nr:

      batch/nr:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

    exporters:
      {{- include "nrKubernetesOtel.daemonset.configMap.extraConfig.exporters" . | nindent 6 }}

      otlphttp/newrelic:
        endpoint: {{ include "nrKubernetesOtel.endpoint" . }}
        headers:
          api-key: ${env:NR_LICENSE_KEY}
      debug:
        verbosity: detailed
        sampling_initial: 5
        sampling_thereafter: 200
    
    connectors:
      {{- include "nrKubernetesOtel.daemonset.configMap.extraConfig.connectors" . | nindent 6 }}
      routing/nr_pipelines:
        default_pipelines: [metrics/default]
        error_mode: propagate
        table:
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/networkscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/loadscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/diskscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/memoryscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/cpuscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/filesystemscraper"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver"
            pipelines: [metrics/nr]
          - context: metric
            condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver"
            pipelines: [metrics/nr]

    service:
      {{- if include "newrelic.common.verboseLog" . }}
      telemetry:
        logs:
          level: "debug"
      {{- end }}
      pipelines:
        {{- include "nrKubernetesOtel.daemonset.configMap.extraConfig.pipelines" . | nindent 8 }}

        {{- if or .Values.receivers.hostmetrics.enabled (or .Values.receivers.kubeletstats.enabled .Values.receivers.prometheus.enabled) }}
        metrics/all_receivers:
          receivers:
            {{- if .Values.receivers.hostmetrics.enabled }}
            - hostmetrics/nr
            {{- end }}
            {{- if .Values.receivers.kubeletstats.enabled }}
            - kubeletstats/nr
            {{- end }}
            {{- if .Values.receivers.prometheus.enabled }}
            - prometheus/nr
            {{- end }}
          exporters:
            - routing/nr_pipelines
        metrics/nr:
          receivers:
            - routing/nr_pipelines
          processors:
            - memory_limiter/nr
            {{- if include "nrKubernetesOtel.lowDataMode" . }}
            - metricstransform/nr_ldm
            - metricstransform/nr_kubeletstats
            - metricstransform/nr_cadvisor
            - metricstransform/nr_kubelet
            - metricstransform/nr_hostmetrics
            - filter/nr_exclude_metrics_low_data_mode
            {{- end }}
            - metricstransform/nr_hostmetrics_cpu
            - transform/nr_truncate
            - filter/nr_exclude_cpu_utilization
            - filter/nr_exclude_memory_utilization
            - filter/nr_exclude_memory_usage
            - filter/nr_exclude_filesystem_utilization
            - filter/nr_exclude_filesystem_usage
            - filter/nr_exclude_filesystem_inodes_usage
            - filter/nr_exclude_system_disk
            - filter/nr_exclude_system_paging
            - filter/nr_exclude_network
            - attributes/nr_exclude_system_paging
            - resourcedetection/nr_cloudproviders
            - resource/nr
            {{- if include "nrKubernetesOtel.lowDataMode" . }}
            - transform/nr_low_data_mode_inator
            - resource/nr_low_data_mode_inator
            {{- end }}
            - attributes/nr_self
            - k8sattributes/nr
            - cumulativetodelta/nr
            - batch/nr
          exporters:
            - otlphttp/newrelic
        {{- end }}
        metrics/default:
          receivers:
            - routing/nr_pipelines
          processors:
            - memory_limiter/nr
            - batch/nr
          exporters:
            - otlphttp/newrelic
        {{- if and .Values.receivers.filelog.enabled  (not .Values.gkeAutopilot) }}
        logs/nr:
          receivers:
            - filelog/nr
          processors:
            - memory_limiter/nr
            - transform/nr_truncate
            - resource/nr
            - k8sattributes/nr
            - batch/nr
          exporters:
            - otlphttp/newrelic
        {{- end }}
    {{- end }}
