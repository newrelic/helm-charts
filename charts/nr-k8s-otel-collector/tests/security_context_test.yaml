suite: securityContext
templates:
  - templates/deployment.yaml
  - templates/deployment-configmap.yaml
  - templates/daemonset.yaml
  - templates/daemonset-configmap.yaml
release:
  name: my-release
  namespace: my-namespace
tests:
  - it: sets pod securityContext set to defaults when no values provided
    set:
      cluster: my-cluster
      licenseKey: us-whatever
    asserts:
      - notExists:
          path: spec.template.spec.securityContext
        template: templates/deployment.yaml
      - notExists:
          path: spec.template.spec.securityContext
        template: templates/daemonset.yaml
  - it: sets pod securityContext from global by common-library
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      global:
        podSecurityContext:
          globalKey: globalValue
    asserts:
      - equal:
          path: spec.template.spec.securityContext
          value:
            globalKey: globalValue
        template: templates/deployment.yaml
      - equal:
          path: spec.template.spec.securityContext
          value:
            globalKey: globalValue
        template: templates/daemonset.yaml
  - it: sets pod securityContext from values by common-library
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      podSecurityContext:
        topLevelKey: topLevelValue
    asserts:
      - equal:
          path: spec.template.spec.securityContext
          value:
            topLevelKey: topLevelValue
        template: templates/deployment.yaml
      - equal:
          path: spec.template.spec.securityContext
          value:
            topLevelKey: topLevelValue
        template: templates/daemonset.yaml
  - it: sets pod securityContext from values by common-library overriding global values
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      podSecurityContext:
        topLevelKey: topLevelValue
      global:
        podSecurityContext:
          globalKey: globalValue
    asserts:
      - equal:
          path: spec.template.spec.securityContext
          value:
            topLevelKey: topLevelValue
        template: templates/deployment.yaml
      - equal:
          path: spec.template.spec.securityContext
          value:
            topLevelKey: topLevelValue
        template: templates/daemonset.yaml
  - it: sets pod securityContext from deployment values
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      deployment:
        podSecurityContext:
          deploymentKey: deploymentValue
    asserts:
      - equal:
          path: spec.template.spec.securityContext
          value:
            deploymentKey: deploymentValue
        template: templates/deployment.yaml
  - it: sets pod securityContext from daemonset values
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      daemonset:
        podSecurityContext:
          daemonsetKey: daemonsetValue
    asserts:
      - equal:
          path: spec.template.spec.securityContext
          value:
            daemonsetKey: daemonsetValue
        template: templates/daemonset.yaml
  - it: sets pod securityContext from deployment values overriding top level and global values
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      deployment:
        podSecurityContext:
          deploymentKey: deploymentValue
      podSecurityContext:
        topLevelKey: topLevelValue
      global:
        podSecurityContext:
          globalKey: globalValue
    asserts:
      - equal:
          path: spec.template.spec.securityContext
          value:
            deploymentKey: deploymentValue
        template: templates/deployment.yaml
  - it: sets pod securityContext from daemonset values overriding top level and global values
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      daemonset:
        podSecurityContext:
          daemonsetKey: daemonsetValue
      podSecurityContext:
        topLevelKey: topLevelValue
      global:
        podSecurityContext:
          globalKey: globalValue
    asserts:
      - equal:
          path: spec.template.spec.securityContext
          value:
            daemonsetKey: daemonsetValue
        template: templates/daemonset.yaml
  - it: sets container securityContext set to defaults when no values provided
    set:
      cluster: my-cluster
      licenseKey: us-whatever
    asserts:
      - notExists:
          path: spec.template.spec.containers[0].securityContext
        template: templates/deployment.yaml
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            privileged: true
        template: templates/daemonset.yaml
  - it: sets container securityContext from global by common-library
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      global:
        containerSecurityContext:
          globalKey: globalValue
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            globalKey: globalValue
        template: templates/deployment.yaml
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            privileged: true
        template: templates/daemonset.yaml
  - it: sets container securityContext from values by common-library
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      containerSecurityContext:
        topLevelKey: topLevelValue
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            topLevelKey: topLevelValue
        template: templates/deployment.yaml
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            privileged: true
        template: templates/daemonset.yaml
  - it: sets container securityContext from values by common-library overriding global values
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      containerSecurityContext:
        topLevelKey: topLevelValue
      global:
        containerSecurityContext:
          globalKey: globalValue
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            topLevelKey: topLevelValue
        template: templates/deployment.yaml
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            privileged: true
        template: templates/daemonset.yaml
  - it: sets container securityContext from deployment values
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      deployment:
        containerSecurityContext:
          deploymentKey: deploymentValue
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            deploymentKey: deploymentValue
        template: templates/deployment.yaml
  - it: sets container securityContext from daemonset values
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      daemonset:
        containerSecurityContext:
          daemonsetKey: daemonsetValue
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            daemonsetKey: daemonsetValue
            privileged: true
        template: templates/daemonset.yaml
  - it: sets container securityContext from deployment values overriding top level and global values
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      deployment:
        containerSecurityContext:
          deploymentKey: deploymentValue
      containerSecurityContext:
        topLevelKey: topLevelValue
      global:
        containerSecurityContext:
          globalKey: globalValue
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            deploymentKey: deploymentValue
        template: templates/deployment.yaml
  - it: sets container securityContext from daemonset values overriding top level and global values
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      daemonset:
        containerSecurityContext:
          daemonsetKey: daemonsetValue
      containerSecurityContext:
        topLevelKey: topLevelValue
      global:
        containerSecurityContext:
          globalKey: globalValue
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            daemonsetKey: daemonsetValue
            privileged: true
        template: templates/daemonset.yaml
  - it: overrides container securityContext from daemonset values
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      daemonset:
        containerSecurityContext:
          daemonsetKey: daemonsetValue
          privileged: false
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext
          value:
            daemonsetKey: daemonsetValue
            privileged: false
        template: templates/daemonset.yaml