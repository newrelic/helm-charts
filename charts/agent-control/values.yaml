# -- Override the name of the chart
nameOverride: ""
# -- Override the full name of the release
fullnameOverride: ""

# -- This `helm` key contains the options for the creation of HelmRelease CRs for Agent Control.
# It uses this name so I don't rename everything in the previous version of the chart that used this
# strategy, that I have copied for this PoC.
helm:
  # -- Enable the installation of the CRs so FluxCD deploy the Super Agent is deployed. This an advanced/debug flag. It
  # should be always be true unless you know what you are going.
  create: true

  # -- Values related to the Helm repository where to download the super agent's chart.
  # @default -- See `values.yaml`
  repository:
    # -- Sets the interval the repository is going to be updated on the controller.
    updateInterval: 24h
    # -- The repository where the super-agent has the chart. This values is meant to be changed only on air-gapped
    # environments or for development/testing purposes.
    url: http://chart-server.newrelic.svc.cluster.local

    # -- A reference to a secret with the keys username and password to authenticate to the repository.
    # @default -- `nil` (no secret reference)
    secretRef:
      # name: name-of-the-secret
    # -- secret of type `kubernetes.io/tls` with the standard keys `tls.crt`, `tls.key`, and `ca.crt`
    # @default -- `nil` (no secret reference)
    certSecretRef:
      # name: name-of-the-secret

  # -- Values related to the super agent's Helm chart release.
  # @default -- See `values.yaml`
  release:
    # -- The Helm chart of the super-agent. This values is meant to be changed only on air-gapped environments or for
    # development/testing purposes.
    chart: agent-control-deployment
    # -- The Helm chart of the super-agent. This values is meant to be changed only on air-gapped environments or for
    # development/testing purposes.
    #
    # TODO: Point renovatebot here.
    version: "0.0.50-beta"

    # -- Set values to the super agent helm release directly from this `values.yaml` file. Refer to https://fluxcd.io/flux/components/helm/helmreleases/#values-overrides
    # @default -- `{}`. Examples on the `values.yaml`
    values:
    # These values are the values that the values that are going to be provided to the helm release as user-supplied.
    # Here you have a example snippet of values that are being used upstream:
    #
    # image:
    #   registry:
    #   repository: newrelic/newrelic-super-agent
    #   tag: ""
    # config:
    #   create: true
    #   name: ""
    #   key: ""
    #   content:
    #     opamp:
    #       headers:
    #         some-key: LICENSEKEY
    #     agents:
    #       agent_1:
    #         agent_type: namespace/agent_type:0.0.1

    # -- Set values from a `configMap` or a `secret`. You can see examples and better documentation inside the
    # `values.yaml` file. Also refer to https://fluxcd.io/flux/components/helm/helmreleases/#values-overrides
    # @default -- empty
    valuesFrom:

      # - kind: ConfigMap or Secret
      #   name: Name of the values referent, in the same namespace as the HelmRelease.
      #   valuesKey (Optional): The data key where the values.yaml or a specific value can be found.
      #                         Defaults to `values.yaml` when omitted.
      #   targetPath (Optional): The YAML dot notation path at which the value should be merged. When set, the
      #                          valuesKey is expected to be a single flat value. Defaults to `nil` when omitted, which
      #                          results in the values getting merged at the root.

      # Examples:
      # - kind: ConfigMap
      #   name: prod-env-values
      #   valuesKey: values-prod.yaml
      # - kind: Secret
      #   name: prod-tls-values
      #   valuesKey: crt
      #   targetPath: tls.crt

    # -- Change the behavior of the operator while installing the chart for the first time. This should only be changed
    # by advanced users that know what they are doing. Exposes the remediations that the operator is going to try
    # before give up installing the chart in case it hits an error.
    # @default -- See `values.yaml`
    install:
      replace: true # Tells the Helm install action to reuse the ‘ReleaseName’, but only if that name is a deleted release which remains in the history.
      remediation:
        retries: 3 # Retries is the number of retries that should be attempted on failures before givin up. An uninstall is performed between each attempt.

    # -- Change the behavior of the operator while upgrading the chart. This should only be changed by advanced users
    # that know what they are doing. Exposes the remediations that the operator is going to try before give up
    # installing the chart in case it hits an error.
    # @default -- See `values.yaml`
    upgrade:
      force: true # Force forces resource updates through a replacement strategy.
      cleanupOnFail: true # Allows deletion of new resources created during the Helm upgrade action when it fails.
      remediation:
        retries: 3 # Retries is the number of retries that should be attempted on failures before givin up. An uninstall is performed between each attempt.
        strategy: rollback # rollback or uninstall.

# -- Values related to the agent control's Helm chart release.
# @default -- See `values.yaml`
agent-control-deployment:
  # -- Enable the installation of the Agent Control. This an advanced/debug flag. It should be always be true unless
  # you know what you are going.
  enabled: true

  # -- Override the name of the chart used to template resource names.
  nameOverride: "agent-control"
  # -- Name of the Kubernetes cluster monitored. Can be configured also with `global.cluster`.
  cluster: ""
  # -- This set this license key to use. Can be configured also with `global.licenseKey`
  licenseKey: ""
  # -- In case you don't want to have the license key in you values, this allows you to point to a user created secret to get the key from there. Can be configured also with `global.customSecretName`
  customSecretName: ""
  # -- In case you don't want to have the license key in you values, this allows you to point to which secret key is the license key located. Can be configured also with `global.customSecretLicenseKey`
  customSecretLicenseKey: ""

  # -- Identity client_id to use.
  identityClientId: ""
  # -- Identity client_secret to use.
  identityClientSecret: ""
  # -- In case you don't want to have the client_id and client_secret in your values, this allows you to point to a user created secret to get the key from there.
  customIdentitySecretName: ""
  customIdentityClientIdSecretKey: ""
  customIdentityClientSecretSecretKey: ""

  # -- Image for the New Relic Agent Control
  # @default -- See `values.yaml`
  image:
    registry:
    repository: newrelic/newrelic-agent-control
    tag: "0.34.0"
    pullPolicy: IfNotPresent
    # -- The secrets that are needed to pull images from a custom registry.
    pullSecrets: []
    # - name: regsecret

  # -- Add user environment variables to the agent
  extraEnv: []
  # -- Add user environment from configMaps or secrets as variables to the agent
  extraEnvFrom: []
  # -- Volumes to mount in the containers
  extraVolumes: []
  # -- Defines where to mount volumes specified with `extraVolumes`
  extraVolumeMounts: []

  # -- Settings controlling ServiceAccount creation.
  # @default -- See `values.yaml`
  serviceAccount:
    # -- Whether the chart should automatically create the ServiceAccount objects required to run.
    create: true
    annotations: {}
    # If not set and create is true, a name is generated using the full name template
    name: ""

  # -- Additional labels for chart objects. Can be configured also with `global.labels`
  labels: {}
  # -- Annotations to be added to all pods created by the integration.
  podAnnotations: {}
  # -- Additional labels for chart pods. Can be configured also with `global.podLabels`
  podLabels: {}

  # -- Resource limits to be added to all pods created by the integration.
  # @default -- `{}`
  resources: {}

  # -- Sets pod's priorityClassName. Can be configured also with `global.priorityClassName`
  priorityClassName: ""
  # -- (bool) Sets pod's hostNetwork. Can be configured also with `global.hostNetwork`
  # @default -- `false`
  hostNetwork:
  # -- Sets security context (at pod level). Can be configured also with `global.podSecurityContext`
  podSecurityContext: {}
  # -- Sets security context (at container level). Can be configured also with `global.containerSecurityContext`
  containerSecurityContext: {}

  # -- Sets pod's dnsConfig. Can be configured also with `global.dnsConfig`
  dnsConfig: {}

  # Settings controlling RBAC objects creation.
  rbac:
    # -- Whether the chart should automatically create the RBAC objects required to run.
    create: true

  # -- Sets pod/node affinities. Can be configured also with `global.affinity`
  affinity: {}
  # -- Sets pod's node selector. Can be configured also with `global.nodeSelector`
  nodeSelector: {}
  # -- Sets pod's tolerations to node taints. Can be configured also with `global.tolerations`
  tolerations: []

  # -- TODO: Adds extra attributes to the cluster and all the metrics emitted to the backend. Can be configured also with `global.customAttributes`
  customAttributes: {}

  # -- TODO: Configures the integration to send all HTTP/HTTPS request through the proxy in that URL. The URL should have a standard format like `https://user:password@hostname:port`. Can be configured also with `global.proxy`
  proxy: ""

  # -- (bool) Send the metrics to the staging backend. Requires a valid staging license key. Can be configured also with `global.nrStaging`
  # @default -- `false`
  nrStaging:

  fedramp:
    # -- (bool) TODO: Enables FedRAMP. Can be configured also with `global.fedramp.enabled`
    # @default -- `false`
    enabled:

  # -- (bool) Sets the debug logs to this integration or all integrations if it is set globally. Can be configured also with `global.verboseLog`
  # @default -- `false`
  verboseLog:

  # -- Enable the cleanup of agent-control managed resources when the chart is uninstalled.
  # If disabled, agents and/or agent configurations managed by the agent-control will not be deleted when the chart is uninstalled.
  cleanupManagedResources: true

  config:
    # -- Configuration for the Agent Control.
    # @default -- See `values.yaml`
    agentControl:
      # -- Set if the configMap is going to be created by this chart or the user will provide its own.
      create: true
      # -- Overrides the configuration that has been created automatically by the chart.
      # This configuration here will be **MERGED** with the configuration specified above.
      # If you need to have you own configuration, disabled the creation of this configMap and create your own.
      content: {}

    # -- List of managed agents that will be deployed. The key represents the name of the agent and the value holds the configuration.
    # @default -- `{}` (See `values.yaml`)
    subAgents:
    # In the example below, open-telemetry is a managed agent that will be deployed.
    # open-telemetry:
    #   # -- Agent type <namespace>/<name>:<version>
    #   type: newrelic/io.opentelemetry.collector:0.1.0
    #   # -- Agent configuration content.
    #   content:
    #     # -- Version of the newrelic/nr-k8s-otel-collector Helm Chart.
    #     chart_version: "0.8.0"
    #     # -- Values to be passed to the newrelic/nr-k8s-otel-collector Helm Chart.
    #     # By default the Agent type already has the `licenseKey` and `cluster` values set to the ones provided,
    #     # so it is not necessary to set them here.
    #     chart_values:
    #       nr-k8s-otel-collector: {}
    #       global: {}

    fleet_control:
      # -- Enables or disables the auth against fleet control. It implies to disable any fleet communication and running the agent
      # in stand alone mode where only the agents specified on `.config.subAgents` will be launched.
      enabled: true
      # -- Specify a fleet_id to automatically connect the Agent Control to an existing fleet.
      fleet_id: ""

      auth:
        # -- Organization ID where fleets will live.
        organizationId: ""
        secret:
          create: true
          # -- Name auth' secret provided by the user. If the creation of this secret is set to `true`, this is the same the secret
          # will have.
          # @default -- release name suffixed with "-auth"
          name:
          ## If private_key and client_id values are specified, their creation is disabled and the `preinstall-user-key` job is not executed
          private_key:
            # -- Key inside the secret containing the private key.
            # @default -- `private_key`
            secret_key:
            # -- In case `.config.auth.secret.create` is true, you can set these keys to set private key directly as base64 if you want to skip its creation.
            # This options is mutually exclusive with `plain_pem`.
            base64_pem:
            # -- In case `.config.auth.secret.create` is true, you can set these keys to set private key directly as plain text if you want to skip its creation.
            # This options is mutually exclusive with `base64_pem`.
            plain_pem:
          client_id:
            # -- Key inside the secret containing the client ID.
            # @default -- `client_id`
            secret_key:
            # -- In case `.config.auth.secret.create` is true, you can set these keys to set client ID directly as base64 if you want to skip its creation.
            # This options is mutually exclusive with `plain`.
            base64:
            # -- In case `.config.auth.secret.create` is true, you can set these keys to set client ID directly as plain text if you want to skip its creation.
            # This options is mutually exclusive with `base64`.
            plain:

  # -- Image for the system identity registration process
  # @default -- See `values.yaml`
  systemIdentityRegistration:
    image:
      repository: newrelic/agent-control-system-identity-registration
      tag: latest
      pullPolicy: IfNotPresent

# -- Values for the Flux chat. Ref.: https://github.com/fluxcd-community/helm-charts/blob/flux2-2.10.2/charts/flux2/values.yaml
# @default -- See `values.yaml`
flux2:
  # -- Enable or disable FluxCD installation. New Relic' Agent Control need Flux to work, but the user can use an already
  # existing Flux deployment. With that use case, the use can disable Flux and use this chart to only install the CRs
  # to deploy the Agent Control.
  enabled: true

  # -- The installation of the CRDs is managed by the chart itself.
  installCRDs: true
  # -- This is the domain name of the cluster.
  clusterDomain: cluster.local

  # -- Source controller provides a way to fetch artifacts to the rest of controllers. The source API (which reference
  # [can be read here](https://fluxcd.io/flux/components/source/api/v1/)) is used by admins and various automated
  # operators to offload the Git, OCO, and Helm repositories management.
  # @default -- Enabled
  sourceController:
    create: true
    annotations:
      prometheus.io/port: "8080"
      # TODO: Should we create a FluxCD entity to monitor flux itself.
      prometheus.io/scrape: "false"

  # -- Helm controller is a Kubernetes operator that allows to declaratively manage Helm chart releases with Kubernetes
  # manifests. The Helm release is defined in a CR ([Custom Resource](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#custom-resources))
  # named `HelmRelease` that the operator will reconcile on the apply, edit, or deletion of a `HelmRelease` resource.
  #
  # New Relic' Agent Control will use this controller by creating `HelmRelease` CRs based in the configuration stored on
  # Fleet Control. This is the only controller that the Agent Control need for now, the other controllers are disabled by default.
  #
  # On the other hand, user might want to leverage having FluxCD installed for their own purposes. Take a look to the
  # `values.yaml` to see how to enable other controllers.
  # @default -- Enabled
  helmController:
    create: true
    annotations:
      prometheus.io/port: "8080"
      # TODO: Should we create a FluxCD entity to monitor flux itself.
      prometheus.io/scrape: "false"

  # This controller is exactly the same as the Helm controller (refer to it) but assembling manifests with
  # Kustomize instead of using templating systems like Helm.
  kustomizeController:
    create: false

  # The image automation controller updates YAML files based on the latest images scanned by image reflector
  # controller, and commits the changes to a given Git repository.
  imageAutomationController:
    create: false

  # The image reflector controller scans image repositories and reflects the image metadata in Kubernetes resources
  # ready to be used by other controllers.
  imageReflectionController:
    create: false

  # The notification controller handles events coming from external systems (GitHub, GitLab, Bitbucket, Harbor,
  # Jenkins, etc) and notifies the GitOps toolkit controllers about source changes. The controller also handles events
  # emitted by the GitOps toolkit controllers (source, kustomize, helm) and dispatches them to external systems (Slack,
  # Microsoft Teams, Discord) based on event severity and involved objects.
  #
  # New Relic provides a powerful alert system with multiple policies and routes to alert users so it is disabled by
  # default on our FluxCD distribution.
  notificationController:
    create: false

  # Upstream chart create Network Policies. They are relaxed to enough to not cut any malicious attack and not
  # reduce the attack surface enough on environments where the security is a must.
  policies:
    create: false

  # -- Create RBAC rules for FluxCD is able to deploy all kind of workloads on the cluster.
  # @default -- Enabled (See `values.yaml`)
  rbac:
    create: true
    createAggregation: true

  # -- As we are using Flux as a tool from the agent control to release new workloads, we do not want Flux to listen to
  # all CRs created on the whole cluster. If the user does not want to use Flux and is only using it because of the
  # agent control, this is the way to go so the cluster has deployed all operators needed by the agent control. But if the
  # user want to use Flux for other purposes besides the agent control, this toggle can be used to allow Flux to work on
  # the whole cluster.
  watchAllNamespaces: false
