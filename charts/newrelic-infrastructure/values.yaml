# - Specify either the New Relic license key or the secret which
#   contains it.
#
# - Specify the Kubernetes cluster name.
#   https://docs.newrelic.com/docs/kubernetes-monitoring-integration
#
# licenseKey:
# customSecretName:
# customSecretLicenseKey:
# cluster:
#
# IMPORTANT: the previous values can also be set as global so that they
# can be shared by other newrelic product's charts
#
# global:
#   licenseKey:
#   customSecretName:
#   customSecretLicenseKey:
#   cluster:
#
# kubeStateMetricsUrl - if provided, the discovery process for kube-state-metrics endpoint won't be triggered
# Only HTTP is accepted. This is an example value: http://172.17.0.3:8080
# disableKubeStateMetrics - disables KSM parsing by the DaemonSet. Defaults to "false" if not provided.
#
# discoveryCacheTTL - if set, this will change the duration to cache the discovered endpoints.
# Valid time units: 'ns', 'us', 'ms', 's', 'm', 'h' default is 1h

enableLinux: true
enableWindows: false
windowsOsList:
  # - version: 1809
  #   imageTag: 2.2.0-windows-1809-alpha
  #   buildNumber: 10.0.17763
  # - version: 1909
  #   imageTag: 2.2.0-windows-1909-alpha
  #   buildNumber: 10.0.18363
  - version: 2004
    imageTag: 2.2.0-windows-2004-alpha
    buildNumber: 10.0.19041


selfMonitoring:
  # Enables the Pixie Health Check nri-flex config.
  # This Flex config performs periodic checks of the Pixie
  # /healthz and /statusz endpoints exposed by the Pixie Cloud Connector.
  # A status for each endpoint is sent to New Relic in a pixieHealthCheck event.
  pixie:
    enabled: true

verboseLog: false

# Accounts and subaccounts created before July 20, 2020 will report, by default, process metrics unless this config option is explicitly set to "false"
# On the other hand New Relic accounts created after July 20, 2020 will **not** send, by default, any process metrics unless this config option is explicitly set to "true",
# https://docs.newrelic.com/docs/release-notes/infrastructure-release-notes/infrastructure-agent-release-notes/new-relic-infrastructure-agent-1120
# enableProcessMetrics: "false"

# This can be set, the default is shown below
# logFile: /var/log/nr-infra.log

image:
  repository: newrelic/infrastructure-k8s
# tag is set from the appVersion (in helpers.tpl)
  tag: ""
  pullPolicy: IfNotPresent
  ## It is possible to specify docker registry credentials
  ## See https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  # pullSecrets:
    # - name: regsecret

  # windowsTag has been deprecated in favour of windowsOsList
  # windowsTag: 1.21.0-windows-1809-alpha

resources:
  limits:
    memory: 300M
  requests:
    cpu: 100m
    memory: 150M

privileged: true

windowsSecurityContext: {}

rbac:
  # Specifies whether RBAC resources should be created
  create: true
  pspEnabled: false

# Our DaemonSet will query the API Server to discover in which node kube-state-metrics (KSM) is deployed, so scrapping
# can be performed by DS instance that shares a node with it.
# Clusters with large amounts of both nodes and ports might want to restrict this discovery operations to a particular
# namespace, to avoid sending non-namespaced requests that could stress the control plane.
# By default this value is empty, which will allow the integration to discover kube-state-metrics on any namespace.
# kubeStateMetricsNamespace: "newrelic"

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  # Specify any annotations to add to the ServiceAccount
  annotations:

# For unprivileged mode - default is 1000.
# Can also be modified for OpenShift clusters where the runAsUser range
# may be restricted.  See OpenShift docs for more information.
# https://www.openshift.com/blog/a-guide-to-openshift-and-uids
runAsUser:

### Openshift ###
# Set openshift.enabled true when installing in an OpenShift Cluster
openshift:
  enabled: false

# When running in privileged mode if the version is equal to "4.x" it will enable
# /var/run/crio.sock instead of /var/run/docker.sock.
# It also automatically enables the OpenShift Control Plane Endpoints.
# Values supported ["3.x","4.x"]
  version: ""

### Customize the Control Plane Endpoints ###
# The New Relic Kubernetest daemonset will attempt to automatically discover the Control Plane endpoints.
#
# See docs for more details and default values:
#  https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring#discover-nodes-components
#
# If you need to customize the endpoint URLs, enable the following variables and configure based upon your environment.
#  https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring#openshift-4x-configuration
#
# schedulerEndpointUrl: "https://localhost:10259"
# etcdEndpointUrl: "https://localhost:9979"
# controllerManagerEndpointUrl: "https://localhost:10257"
# apiServerEndpointUrl: "https://localhost:6443"

### ETCD mTLS
# In order to set mTLS for querying ETCD, use the follow configuration options.
#
# https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring#mtls-how-to
# https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring#mtls-how-to-openshift
#
# etcdTlsSecretName: newrelic-infra-etcd-tls-secret
# etcdTlsSecretNamespace: newrelic

# If you wish to provide additional labels to apply to the pod(s), specify them here
# podLabels:

# If you wish to provide additional annotations to apply to the pod(s), specify
# them here
# podAnnotations:

# If you wish to provide your own newrelic.yml file include it under config:
# the sample config file is included here as an example. Some options have
# been omitted because they are handled either by variables, or a secret. They
# are display_name, license_key, log_file and verbose.
# config:
  #
  # New Relic Infrastructure configuration file
  #
  # Lines that begin with # are comment lines and are ignored by the
  # Infrastructure agent. If options have command line equivalents, New Relic
  # will use the command line option to override any value set in this file.
  #

  #
  # Option : proxy
  # Value  : Useful if your firewall rules require the agent to use a
  #          proxy URL (HTTP or HTTPS) to communicate with New Relic.
  # Default: none
  #
  # proxy: https://user:password@hostname:port

  #
  # Option : Optional custom attributes
  # Use optional key-value pairs to build filter sets, group your results,Âª
  # annotate your Insights data, etc.
  #
  # custom_attributes:
  #  environment: production
  #  service: login service
  #  team: alpha-team
  #

# Pod scheduling priority
# Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
# priorityClassName: high-priority

# Node labels for pod assignment
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Node affinity rules
# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
#
# IMPORTANT #
# ######### #
# When .Values.global.fargate == true, the chart will automatically add the required affinity rules to exclude
# the DaemonSet from Fargate nodes. There is no need to manually touch this property achieve this.
# This automatic exclusion will, however, not take place if this value is overridden: Setting this to a
# non-empty value WHEN deploying in EKS Fargate (global.fargate == true) requires the user to manually
# include in their custom ruleset an exclusion for nodes with "eks.amazonaws.com/compute-type: fargate", as
# the New Relic DaemonSet MUST NOT be deployed on fargate nodes, as the operator takes care of injecting it
# as a sidecar instead.
# Please refer to the daemonset.yaml template for more details on how to achieve this.
nodeAffinity: {}

# Please note that an additional nodeSelector is added automatically in order to
# select the correct Windows version of the node: "node.kubernetes.io/windows-build"
# https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-containers/
windowsNodeSelector:
  kubernetes.io/os: windows

# These are default tolerations to be able to run the New Relic Kubernetes
# integration.
tolerations:
  - operator: "Exists"
    effect: "NoSchedule"
  - operator: "Exists"
    effect: "NoExecute"

# K8s DaemonSet update strategy.
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1

# Custom attributes to be passed to the New Relic agent
customAttributes: "'{\"clusterName\":\"$(CLUSTER_NAME)\"}'"

# If you wish to monitor services running on Kubernetes you can provide integrations
# configuration under integrations_config. You just need to create a new entry where
# the "name" is the filename of the configuration file and the data is the content of
# the integration configuration. The name must end in ".yaml" as this will be the
# filename generated and the Infrastructure agent only looks for YAML files. The data
# part is the actual integration configuration as described in the spec here:
# https://docs.newrelic.com/docs/integrations/integrations-sdk/file-specifications/integration-configuration-file-specifications-agent-v180

# For example, if you wanted do to monitor a Redis instance that has a label "app=redis"
# you could do so by adding following entry:
  # integrations_config:
  #   - name: nri-redis.yaml
  #     data:
  #       discovery:
  #         command:
  #           # Run NRI Discovery for Kubernetes
  #           # https://github.com/newrelic/nri-discovery-kubernetes
  #           exec: /var/db/newrelic-infra/nri-discovery-kubernetes
  #           match:
  #             label.app: redis
  #       integrations:
  #         - name: nri-redis
  #           env:
  #             # using the discovered IP as the hostname address
  #             HOSTNAME: ${discovery.ip}
  #             PORT: 6379
  #           labels:
  #             env: test
# For more details on monitoring services on Kubernetes see
# https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-apps-services/monitor-services-running-kubernetes
integrations_config: []

# Sends data to staging, can be set as a global.
# global.nrStaging
nrStaging: false

# prefix nodes display name with cluster to reduce chances of collisions
# prefixDisplayNameWithCluster: false

# 'true' will use the node name as the name for the "host",
#  note that it may cause data collision if the node name is the same in different clusters
#  and prefixDisplayNameWithCluster is not set to true.
# 'false' will use the host name as the name for the "host".
useNodeNameAsDisplayName: true

daemonSet:
  # Annotations to add to the DaemonSet.
  annotations: {}
