{{- if include "newrelic-super-agent.auth.secret.shouldRunJob" . -}}
{{- /*
User key secret is used only in the step that create the system identity.
The secret that is created by the common-library does not allow to add annotations so the secret is removed
once the installation hook is finished, so I have to add it as a hook.
*/ -}}
{{- if not (include "newrelic.common.userKey._customSecretName" .) }}
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1010"
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "preinstall-user-key" ) }}
  namespace: {{ .Release.Namespace }}
data:
  {{- /*
    This secret is needed duplicating the userKey because it is in a helm hook and has a hook lifetime.
    Internal helpers to get the userKey do not fail in case it is empty so I need to test here if it is empty.
   */}}
  {{- if not (include "newrelic.common.userKey._userKey" .) }}
    {{- fail "You must specify a userKey or a customUserKeySecretName containing it" -}}
  {{- end }}
  {{ include "newrelic.common.userKey.secretKeyName" . }}: {{ include "newrelic.common.userKey._userKey" . | b64enc }}
{{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1005"
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "system-identity-installer" ) }}
  namespace: {{ .Release.Namespace }}
spec:
  ttlSecondsAfterFinished: 120
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.serviceAccount.name" .) "suffix" "auth" ) }}
      containers:
        - name: register-system-identity
          image: alpine 
          env:
            - name: USER_KEY
              valueFrom:
                secretKeyRef:
                  {{- if include "newrelic.common.userKey._customSecretName" . }}
                  name: {{ include "newrelic.common.userKey.secretName" . }}
                  {{- else }}
                  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "preinstall-user-key" ) }}
                  {{- end }}
                  key: {{ include "newrelic.common.userKey.secretKeyName" . }}
          command:
            - ash
          args:
            - -c
            - |
              set -euo pipefail
              apk update
              apk add kubectl

              echo Checking if the secret '{{ include "newrelic-super-agent.auth.secret.name" . }}' is already present in the cluster
              if kubectl get secret {{ include "newrelic-super-agent.auth.secret.name" . }}; then
                echo System identity already exists. Exiting gracefully...
                exit 0
              fi

              echo Generating the Keys...
              apk add curl jq openssl
              TEMPORAL_FOLDER=gen-folder
              mkdir $TEMPORAL_FOLDER
              openssl genrsa -out "$TEMPORAL_FOLDER/key" 4096
              openssl rsa -in "$TEMPORAL_FOLDER/key" -pubout -out "$TEMPORAL_FOLDER/pub"

              echo Key generated, creating the identity...
              for RETRY in 1 2 3; do
                HTTP_CODE=$(echo '{ "query":
                    "mutation {
                      systemIdentityCreate(
                        name: \"System Identity for Kubernetes cluster '{{ include "newrelic.common.cluster" . }}'\",
                        organizationId: \"{{ include "newrelic-super-agent.auth.organizationId" . }}\",
                        publicKey: \"'$(openssl enc -base64 -A -in "$TEMPORAL_FOLDER/pub")'\"
                      ) {
                        clientId,
                        name
                      }
                    }"
                  }' | tr -d $'\n' | \
                  curl \
                    -w "%{http_code}" \
                    -H "Content-Type: application/json" \
                    -H "API-Key: $USER_KEY" \
                    -o "$TEMPORAL_FOLDER/response.json" \
                    --data @- \
                    "{{ include "newrelic-super-agent.config.endpoints.systemIdentityRegistration" . }}"
                )
                if [ $HTTP_CODE -eq 200 ]; then
                  break
                fi
                echo "Error creating the new system identity. The API endpoint returned $HTTP_CODE. Retrying ($RETRY/3)..."
                sleep 2
              done
              if [ $HTTP_CODE -ne 200 ]; then echo HTTP_CODE=$HTTP_CODE ;exit 1; fi

              ERROR_MESSAGE=$(jq -r '.errors[0].message // "NOERROR"' "$TEMPORAL_FOLDER/response.json")
              if [ "$ERROR_MESSAGE" != "NOERROR" ]; then
                echo "Failed to create a New Relic System Identity for OpAMP communication authentication. Please verify that your User Key is valid and that your Account Organization has the necessary permissions to create a System Identity: $ERROR_MESSAGE"
                exit 1
              fi

              echo Creating the secret '{{ include "newrelic-super-agent.auth.secret.name" . }}'...
              kubectl create secret generic --dry-run=client -o json \
                {{ include "newrelic-super-agent.auth.secret.name" . }} \
                --from-literal=CLIENT_ID=$(jq -r '.data.systemIdentityCreate.clientId' "$TEMPORAL_FOLDER/response.json") \
                --from-file="private_key=$TEMPORAL_FOLDER/key" | \
              jq '.metadata.labels |= {{ include "newrelic.common.labels" . | fromYaml | toJson }}' | \
              kubectl apply -n "{{ .Release.Namespace }}" -f -
---
{{ if .Values.rbac.create }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1010"
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "auth") }}
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [ "" ]
    resources: ["secrets"]
    verbs:
      - create
      - patch
      - update
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1009"
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "auth") }}
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.naming.fullname" .) "suffix" "auth") }}
subjects:
- kind: ServiceAccount
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.serviceAccount.name" .) "suffix" "auth" ) }}
  namespace: {{ .Release.Namespace }}
{{- end }}

{{- if include "newrelic.common.serviceAccount.create" . }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-1010"
  {{- if include "newrelic.common.serviceAccount.annotations" . }}
    {{- include "newrelic.common.serviceAccount.annotations" . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
  name: {{ include "newrelic.common.naming.truncateToDNSWithSuffix" (dict "name" (include "newrelic.common.serviceAccount.name" .) "suffix" "auth" ) }}
  namespace: {{ .Release.Namespace }}
{{- end -}}
{{- end -}}
