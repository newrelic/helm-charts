{{- if (include "newrelic-logging.areValuesValid" .) }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: {{ .Release.Namespace }}
  labels:
    kubernetes.io/os: windows
    {{ include "newrelic-logging.labels" . | indent 4 }}
  name: {{ template "newrelic-logging.fullname" . }}
spec:
  updateStrategy:
    type: {{ .Values.updateStrategy }}
  selector:
    matchLabels:
      app: {{ template "newrelic-logging.name" . }}
      release: {{.Release.Name }}
      kubernetes.io/os: windows
  template:
    metadata:
    {{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8}}
    {{- end }}
      labels:
        app: {{ template "newrelic-logging.name" . }}
        release: {{.Release.Name }}
        kubernetes.io/os: windows
        {{- if .Values.podLabels}}
{{ toYaml .Values.podLabels | indent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "newrelic-logging.serviceAccountName" . }}
      # https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
      dnsPolicy: ClusterFirst
      containers:
        - name: {{ template "newrelic-logging.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          securityContext: {}
          env:
            - name: ENDPOINT
              {{- if (include "newrelic.nrStaging" .) }}
              value: "https://staging-log-api.newrelic.com/log/v1"
              {{- else if .Values.endpoint }}
              value: {{ .Values.endpoint }}
              {{- else if eq (substr 0 2 (include "newrelic-logging.licenseKey" .)) "eu" }}
              value: "https://log-api.eu.newrelic.com/log/v1"
              {{- else }}
              value: "https://log-api.newrelic.com/log/v1"
              {{- end }}
            - name: SOURCE
              value: "kubernetes"
            - name: LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  {{- if (include "newrelic-logging.licenseKey" .) }}
                  name: {{ template "newrelic-logging.fullname" . }}-config
                  key: license
                  {{- else }}
                  name: {{ include "newrelic-logging.customSecretName" . }}
                  key: {{ include "newrelic-logging.customSecretKey" . }}
                  {{- end }}
            - name: CLUSTER_NAME
              value: {{ include "newrelic-logging.clusterName" . }}
            - name: LOG_LEVEL
              value: {{ .Values.fluentBit.logLevel | quote }}
            - name: PATH
              value: {{ .Values.fluentBit.path | quote }}
          command:
            - C:\fluent-bit\bin\fluent-bit.exe
            - -c
            - c:\fluent-bit\etc\fluent-bit.conf
            - -e
            - C:\fluent-bit\bin\out_newrelic_win64.dll
          volumeMounts:
            - mountPath: C:\fluent-bit\etc
              name: fluent-bit-config
            - mountPath: C:\k
              name: k
            - mountPath: C:\var\log
              name: varlog
            - mountPath: C:\ProgramData
              name: progdata
          {{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- end }}
      volumes:
        - name: fluent-bit-config
          configMap:
            name: {{ template "newrelic-logging.fluentBitConfig" . }}
        - name: k
          hostPath:
            path: C:\k
        - name: varlog
          hostPath:
            path: C:\var\log
        - name: progdata
          hostPath:
            path: C:\ProgramData
      {{- if $.Values.priorityClassName }}
      priorityClassName: {{ $.Values.priorityClassName }}
      {{- end }}
      {{- if $.Values.nodeSelector }}
      nodeSelector:
{{ toYaml $.Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
{{- end }}
