{{- if and (include "newrelic-logging.areValuesValid" $)  $.Values.enableWindows }}
{{- range .Values.windowsOsList }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: {{ $.Release.Namespace }}
  labels:
    kubernetes.io/os: windows
{{ include "newrelic-logging.labels" $ | indent 4 }}
  name: {{ template "newrelic-logging.fullname" $ }}-windows-{{ .version }}
  annotations:
  {{- if $.Values.daemonSet.annotations }}
{{ toYaml $.Values.daemonSet.annotations | indent 4 }}
  {{- end }}
spec:
  updateStrategy:
    type: {{ $.Values.updateStrategy }}
  selector:
    matchLabels:
      app: {{ template "newrelic-logging.name" $ }}
      release: {{ $.Release.Name }}
      kubernetes.io/os: windows
  template:
    metadata:
      annotations:
        checksum/fluent-bit-config: {{ include (print $.Template.BasePath "/configmap.yaml") $ | sha256sum }}
    {{- if $.Values.podAnnotations }}
{{ toYaml $.Values.podAnnotations | indent 8}}
    {{- end }}
      labels:
        app: {{ template "newrelic-logging.name" $ }}
        release: {{ $.Release.Name }}
        kubernetes.io/os: windows
        app.kubernetes.io/name: {{ template "newrelic-logging.name" $ }}
        {{- if $.Values.podLabels}}
{{ toYaml $.Values.podLabels | indent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "newrelic.common.serviceAccount.name" $ }}
      {{- with include "newrelic.common.dnsConfig" $ }}
      dnsConfig:
        {{- . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      terminationGracePeriodSeconds: 10
      {{- with include "newrelic.common.images.renderPullSecrets" ( dict "pullSecrets" (list $.Values.image.pullSecrets) "context" $) }}
      imagePullSecrets:
        {{- . | nindent 8 }}
      {{- end }}
      {{- if $.Values.windows.initContainers }}
      initContainers:
{{ toYaml $.Values.windows.initContainers | indent 8 }}
      {{- end }}
      containers:
        - name: {{ template "newrelic-logging.name" $ }}
          # We have to use 'replace' to remove the double-quotes that "newrelic.common.images.image" has, so that
          # we can append the Windows image tag suffix (and then re-quote that value)
          image: "{{ include "newrelic.common.images.image" ( dict "imageRoot" $.Values.image "context" $) | replace "\"" ""}}-{{ .imageTagSuffix }}"
          imagePullPolicy: "{{ $.Values.image.pullPolicy }}"
          securityContext: {}
          env:
            - name: ENDPOINT
              value: {{ include "newrelic-logging.logsEndpoint" $ | quote }}
            - name: SOURCE
              value: {{ if (include "newrelic-logging.lowDataMode" $) }} "k8s" {{- else }} "kubernetes" {{- end }}
            - name: LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  {{- if (include "newrelic-logging.licenseKey" $) }}
                  name: {{ template "newrelic-logging.fullname" $ }}-config
                  key: license
                  {{- else }}
                  name: {{ include "newrelic-logging.customSecretName" $ }}
                  key: {{ include "newrelic-logging.customSecretKey" $ }}
              {{- end }}
            - name: CLUSTER_NAME
              value: {{ include "newrelic-logging.cluster" $ }}
            - name: LOG_LEVEL
              value: {{ $.Values.fluentBit.logLevel | quote }}
            - name: LOG_PARSER
              {{- if $.Values.fluentBit.criEnabled }}
              value: "cri,docker"
              {{- else }}
              value: "docker,cri"
              {{- end }}
            {{- if or (not $.Values.fluentBit.persistence) (eq $.Values.fluentBit.persistence.mode "hostPath") }}
            - name: FB_DB
              value: {{ $.Values.fluentBit.windowsDb | quote }}
            {{- else }}
            - name: FB_DB
              value: ""
            {{- end }}
            - name: PATH
              value: {{ $.Values.fluentBit.windowsPath | quote }}
            - name: K8S_BUFFER_SIZE
              value: {{ $.Values.fluentBit.k8sBufferSize | quote }}
            - name: K8S_LOGGING_EXCLUDE
              value: {{ $.Values.fluentBit.k8sLoggingExclude | quote }}
            - name: LOW_DATA_MODE
              value: {{ include "newrelic-logging.lowDataMode" $ | default "false" | quote }}
            - name: RETRY_LIMIT
              value: {{ $.Values.fluentBit.retryLimit | quote }}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SEND_OUTPUT_PLUGIN_METRICS
              value: {{ $.Values.fluentBit.sendMetrics | default "false" | quote }}
            - name: METRICS_HOST
              value: {{ include "newrelic-logging.metricsHost" $ | quote }}
            {{- include "newrelic-logging.extraEnv" $ | nindent 12 }}
          command:
            - C:\fluent-bit\bin\fluent-bit.exe
            - -c
            - c:\fluent-bit\etc\fluent-bit.conf
            - -e
            - C:\fluent-bit\bin\out_newrelic.dll
          {{- if $.Values.exposedPorts }}
          ports: {{ toYaml $.Values.exposedPorts | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: C:\fluent-bit\etc
              name: fluent-bit-config
            - mountPath: C:\var\log
              name: logs
              {{- if and ($.Values.fluentBit.persistence) (ne $.Values.fluentBit.persistence.mode "hostPath") }}
              readOnly: true
              {{- end }}
              # We need to also mount this because the logs in C:\var\logs are actually symlinks to C:\ProgramData.
              # So, in order to be able to read these logs, the reading process needs to also have access to C:\ProgramData.
            - mountPath: C:\ProgramData
              name: progdata
              {{- if and ($.Values.fluentBit.persistence) (ne $.Values.fluentBit.persistence.mode "hostPath") }}
              readOnly: true
              {{- end }}
          {{- if $.Values.resources }}
          resources:
{{ toYaml $.Values.resources | indent 12 }}
          {{- end }}
      volumes:
        - name: fluent-bit-config
          configMap:
            name: {{ template "newrelic-logging.fluentBitConfig" $ }}
        - name: logs
          hostPath:
            path: C:\var\log
        - name: progdata
          hostPath:
            path: C:\ProgramData
      {{- if $.Values.priorityClassName }}
      priorityClassName: {{ $.Values.priorityClassName }}
      {{- end }}
      nodeSelector:
        {{- if $.Values.windowsNodeSelector }}
{{ toYaml $.Values.windowsNodeSelector | indent 8 }}
        {{- else }}
        kubernetes.io/os: windows
        # Windows containers can only be executed on hosts running the exact same Windows version and build number
        node.kubernetes.io/windows-build: {{ .buildNumber }}
        {{- end }}
      {{- if $.Values.tolerations }}
      tolerations:
{{ toYaml $.Values.tolerations | indent 8 }}
      {{- end }}
---
{{- end }}
{{- end }}
