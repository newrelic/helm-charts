{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

## Bundled charts

This chart do not deploy anything by itself but has many charts as dependencies install and upgrade the New Relic Kubernetes
Integration using only one chart.

In case you need more information of each component this chart installs or you are and advanced user that want to install each
component separated, here is a list of components that this chart installs and where you can have more information about them:

| Component                    | Installed by default? | Github repository                                                                                                                                      |
|------------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|
| newrelic-infrastructure      | Yes                   | [newrelic/nri-kubernetes](https://github.com/newrelic/nri-kubernetes/tree/main/charts/newrelic-infrastructure)                                         |
| nri-metadata-injection       | Yes                   | [newrelic/k8s-metadata-injection](https://github.com/newrelic/k8s-metadata-injection/tree/main/charts/nri-metadata-injection)                          |
| kube-state-metrics           |                       | [kubernetes/kube-state-metrics](https://github.com/kubernetes/kube-state-metrics/tree/master/charts/kube-state-metrics)                                |
| newrelic-infra-operator      |                       | [newrelic/newrelic-infra-operator](https://github.com/newrelic/newrelic-infra-operator/tree/main/charts/newrelic-infra-operator) (Beta)                |
| newrelic-k8s-metrics-adapter |                       | [newrelic/newrelic-k8s-metrics-adapter](https://github.com/newrelic/newrelic-k8s-metrics-adapter/tree/main/charts/newrelic-k8s-metrics-adapter) (Beta) |
| newrelic-logging             |                       | [newrelic/helm-charts](https://github.com/newrelic/helm-charts/tree/master/charts/newrelic-logging)                                                    |
| newrelic-pixie               |                       | [newrelic/newrelic-pixie](https://github.com/newrelic/helm-charts/tree/master/charts/newrelic-pixie)                                                   |
| nri-kube-events              |                       | [newrelic/nri-kube-events](https://github.com/newrelic/nri-kube-events/tree/main/charts/nri-kube-events)                                               |
| nri-prometheus               |                       | [newrelic/nri-prometheus](https://github.com/newrelic/nri-prometheus/tree/main/charts/nri-prometheus)                                                  |
| pixie-chart                  |                       | [Pixie](https://docs.pixielabs.ai/installing-pixie/install-schemes/helm/#3.-deploy)                                                                    |

### [newrelic-infrastructure](https://github.com/newrelic/nri-kubernetes/tree/main/charts/newrelic-infrastructure)
This component will (in privileged mode) monitor the nodes and run integrations to monitor services inside the Kubernetes cluster (in any mode). It
will also deploy a daemonset in the control plane nodes to give information about the health of the control plane and deployment to scrape the data
from the KSM (see below)

### [nri-metadata-injection](https://github.com/newrelic/k8s-metadata-injection/tree/main/charts/nri-metadata-injection)
This webhook will inject environments variables to all the pods so the APM agents have the context to know where they are running.

### [kube-state-metrics](https://github.com/kubernetes/kube-state-metrics/tree/master/charts/kube-state-metrics)
kube-state-metrics (KSM) listens to the Kubernetes API server and generates metrics about the state of the objects. It is not focused on the health
of the individual Kubernetes components, but on the health of the various objects inside, such as deployments and pods.

### [nri-kube-events](https://github.com/newrelic/nri-kube-events/tree/main/charts/nri-kube-events)
This component is an active watcher of event resource in the Kubernetes system that take those infrastructure events (like a pod has been created or
a pod have just crashed) and pushes them to New Relic.

### [newrelic-infra-operator](https://github.com/newrelic/newrelic-infra-operator/tree/main/charts/newrelic-infra-operator) (Beta)
This chart is meant to be used with Fargate clusters or serverless clusters that need to deploy the infrastructure agent as a sidecar per pod.

### [newrelic-k8s-metrics-adapter](https://github.com/newrelic/newrelic-k8s-metrics-adapter/tree/main/charts/newrelic-k8s-metrics-adapter) (Beta)
This chart provides a source of data for Horizontal Pod Autoscalers (HPA) based on a NRQL query from New Relic.

### [newrelic-logging](https://github.com/newrelic/helm-charts/tree/master/charts/newrelic-logging)
Install a Daemonset on all the nodes that allow to send logs from the cluster to New Relic.

### [nri-prometheus](https://github.com/newrelic/nri-prometheus/tree/main/charts/nri-prometheus)
Fetch metrics in the Prometheus metrics format and send them to the New Relic platform.

### [newrelic-pixie](https://github.com/newrelic/helm-charts/tree/master/charts/newrelic-pixie)
Connects to the Pixie API and enables the New Relic plugin in Pixie. The plugin then sends data generated by a set of PxL scripts to New Relic.

### [Pixie](https://docs.pixielabs.ai/installing-pixie/install-schemes/helm/#3.-deploy)
Pixie is an open source observability tool for Kubernetes applications that uses eBPF to automatically capture telemetry data without the need for
manual instrumentation.

## Configure components

It is possible to configure settings for the individual charts this chart groups by specifying values for them under a key using the name of the chart,
as specified in [helm documentation](https://helm.sh/docs/chart_template_guide/subcharts_and_globals).

For example, by adding the following to the `values.yml` file:

```yaml
# Configuration settings for the newrelic-infrastructure chart
newrelic-infrastructure:
  # Any key defined in the values.yml file for the newrelic-infrastructure chart can be configured here:
  # https://github.com/newrelic/nri-kubernetes/blob/main/charts/newrelic-infrastructure/values.yaml

  verboseLog: false

  resources:
    limits:
      memory: 512M
```

It is possible to override any entry of the [`newrelic-infrastructure`](https://github.com/newrelic/nri-kubernetes/tree/main/charts/newrelic-infrastructure)
chart, as defined in their [`values.yml` file](https://github.com/newrelic/nri-kubernetes/blob/main/charts/newrelic-infrastructure/values.yaml).

The same approach can be followed to update any of the subcharts.

After making these changes to the `values.yml` file, or a custom values file, make sure to apply them using:

```
$ helm upgrade --reuse-values -f values.yaml [RELEASE] newrelic/nri-bundle
```

Where `[RELEASE]` is the name of the helm release, e.g. `newrelic-bundle`.


## Monitor on host integrations

If you wish to monitor services running on Kubernetes you can provide integrations
configuration under `integrations_config` that it will passed down to the `newrelic-infrastructure` chart.

You just need to create a new entry where the "name" is the filename of the configuration file and the data is the content of
the integration configuration. The name must end in ".yaml" as this will be the
filename generated and the Infrastructure agent only looks for YAML files.

The data part is the actual integration configuration as described in the spec here:
https://docs.newrelic.com/docs/integrations/integrations-sdk/file-specifications/integration-configuration-file-specifications-agent-v180

In the following example you can see how to monitor a Redis integration with autodiscovery

```yaml
newrelic-infrastructure:
  nri-redis-sampleapp:
    discovery:
      command:
        exec: /var/db/newrelic-infra/nri-discovery-kubernetes --tls --port 10250
        match:
          label.app: sampleapp
    integrations:
      - name: nri-redis
        env:
          # using the discovered IP as the hostname address
          HOSTNAME: ${discovery.ip}
          PORT: 6379
        labels:
          env: test
```

## Values managed globally

Some of the subchart implement the [New Relic's common Helm library](https://github.com/newrelic/helm-charts/tree/master/library/common-library) which
means that it honors a wide range of defaults and globals common to most New Relic Helm charts.

Options that can be defined globally include `affinity`, `nodeSelector`, `tolerations`, `proxy` and others. The full list can be found at
[user's guide of the common library](https://github.com/newrelic/helm-charts/blob/master/library/common-library/README.md).

At the time of writing this document, all the charts from `nri-bundle` except `newrelic-logging` and `synthetics-minion` implements this library and
honors global options as described below.

{{ template "chart.valuesSection" . }}

{{ if .Maintainers }}
## Maintainers
{{ range .Maintainers }}
{{- if .Name }}
{{- if .Url }}
* [{{ .Name }}]({{ .Url }})
{{- else }}
* {{ .Name }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
