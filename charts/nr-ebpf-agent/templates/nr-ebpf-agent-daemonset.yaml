---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nr-ebpf-agent
  labels:
    app: nr-ebpf-agent
    component: agent
    {{- include "newrelic.common.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "newrelic.common.labels.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: nr-ebpf-agent
        component: agent
        {{- include "newrelic.common.labels.podLabels" . | nindent 8 }}
      annotations:
        checksum/config: ""
        {{- with .Values.ebpfAgent.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with include "nrEbpfAgent.ebpfAgent.securityContext.pod" . }}
      securityContext:
        {{- . | nindent 8 }}
      {{- end }}
      {{- with include "newrelic.common.priorityClassName" . }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- with include "newrelic.common.images.renderPullSecrets" ( dict "pullSecrets" (list .Values.pullSecrets) "context" .) }}
      imagePullSecrets:
        {{- . | nindent 8 }}
      {{- end }}
      {{- with include "newrelic.common.dnsConfig" . }}
      dnsConfig:
        {{- . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: kernel-header-installer
        image: amazonlinux:2
        command:
          - "/bin/bash"
          - "-c"
          - |
            # Detect OS and install kernel headers accordingly
            # sleep 10000s
            if [ -f /host/etc/os-release ]; then \
              . /host/etc/os-release; \
              if [[ $ID == 'amzn' || $ID == 'centos' || $ID == 'rhel' ]]; then \
                echo 'Detected EKS/Amazon Linux or CentOS/RHEL. Installing kernel-devel...' && chroot /host /bin/bash -c "yum install -y kernel-devel-$(uname -r)"; \
              elif [[ $ID == 'debian' || $ID == 'ubuntu' ]]; then \
                echo 'Detected Debian/Ubuntu. Installing linux-headers...' && chroot /host /bin/bash -c "apt-get update && apt-get install -y linux-headers-$(uname -r)"; \
              # elif [[ $ID == 'cos' ]]; then \
              #   echo 'Detected GKE/Container-Optimized OS. Installing linux-headers via toolbox...' && /host/usr/bin/toolbox apt-get update && /host/usr/bin/toolbox apt-get install -y linux-headers-$(uname -r)-amd; \
              else \
                echo 'Unsupported OS: '$ID; exit 1; \
              fi; \
            else \
              echo '/host/etc/os-release not found'; exit 1; \
            fi
        securityContext:
          privileged: true
        volumeMounts:
        - name: host-root-volume
          mountPath: /host

      containers:
      - name: nr-ebpf-agent
        image: {{ .Values.ebpfAgent.image.repository }}:{{ .Values.ebpfAgent.image.tag }}
        imagePullPolicy: {{ .Values.ebpfAgent.image.pullPolicy }}
        resources: {{ .Values.ebpfAgent.resources | toYaml | nindent 10 }}
        env:
          - name: PL_HOST_PATH
            value: "/host"
          - name: PL_STIRLING_SOURCES
            value: "{{ .Values.stirlingSources | default "socket_tracer,tcp_stats" }}"
          {{- include "generateTracingEnvVars" . | indent 10 }}
          - name: KUBERNETES_CLUSTER_DOMAIN
            value: "cluster.local" 
          - name: NEW_RELIC_LOG_LEVEL
            value: "{{ .Values.logLevel }}"            
          - name: NEW_RELIC_LOG_FILE_PATH
            value: "{{ .Values.logFilePath }}"
          - name: TABLE_STORE_DATA_LIMIT_MB
            value: "{{ .Values.tableStoreDataLimitMB }}"
          - name: TLS_ENABLED
          {{- if (hasKey .Values "tls") }}
          {{- if eq .Values.tls.enabled true }}
            value: "true"
          {{- else }}
            value: "false"
          {{- end }}
          {{- if eq .Values.tls.enabled true }}
          - name: TLS_CERT_PATH
            value: "{{ .Values.tls.certPath }}/"
          {{- end }}
          {{- end }}

          {{- if .Values.ebpfAgent.downloaded_packaged_headers_path }}
          - name: DOWNLOADED_PACKAGED_HEADERS_PATH
            value: "{{ .Values.ebpfAgent.downloaded_packaged_headers_path }}"
          {{- end }}

          {{- if .Values.ebpfAgent.distro_kernel_headers_path }}
          - name: DISTRO_KERNEL_HEADERS_PATH
            value: "{{ .Values.ebpfAgent.distro_kernel_headers_path }}"
          {{- end }}

        securityContext:
          privileged: true
        volumeMounts:
          - name: host-root-volume
            mountPath: /host
            readOnly: true
          - name: sys-volume
            mountPath: /sys
            readOnly: true
          {{- if (hasKey .Values "tls") }}
          {{- if eq .Values.tls.enabled true }}
          - name: cert
            mountPath: "{{ .Values.tls.certPath }}/"
            readOnly: true
          {{- end }}
          {{- end }}
      - name: nr-ebpf-client
        image: {{ .Values.ebpfClient.image.repository }}:{{ .Values.ebpfClient.image.tag }}
        imagePullPolicy: {{ .Values.ebpfClient.image.pullPolicy }}
        resources: {{ .Values.ebpfClient.resources | toYaml | nindent 10 }}
        env:
          - name: DEPLOYMENT_NAME
            value: {{ .Values.cluster }}
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: OTLP_ENDPOINT
            value: {{ include "nr-otel-collector-receiver.endpoint" .}}
          - name: PL_STIRLING_SOURCES
            value: "{{ .Values.stirlingSources | default "socket_tracer,tcp_stats" }}"
          {{- include "generateClientScriptEnvVars" . | nindent 10 }}
          {{-  if (hasKey .Values.protocols.http "spans") }}
          {{- if .Values.protocols.http.spans.samplingErrorRate}}
          {{- include "validate.samplingErrorRate" (dict "protocol" "http" "errorRate" .Values.protocols.http.spans.samplingErrorRate) }}
          - name: PROTOCOLS_HTTP_SPANS_SAMPLING_ERROR_RATE
            value: "{{ .Values.protocols.http.spans.samplingErrorRate | default "0"}}"
          {{- end }}
          {{- end }}
          - name: KUBERNETES_CLUSTER_DOMAIN
            value: "{{ .Values.kubernetesClusterDomain }}"
          - name: NAMESPACE
            value: {{ .Release.Namespace }}
          - name: AGENT_SERVICE_NAME
            value: {{ include "nr-ebpf-agent.service.name" . }}
          # TODO(kpattaswamy): Once we implement TLS, we should make this configurable again
          - name: IS_INSECURE
            value: "True"
          - name: NEW_RELIC_LOG_LEVEL
            value: "{{ .Values.logLevel }}"            
          - name: NEW_RELIC_LOG_FILE_PATH
            value: "{{ .Values.logFilePath }}"            
          - name: TLS_ENABLED
          {{- if (hasKey .Values "tls") }}
            {{- if eq .Values.tls.enabled true }}
            value: "true"
            {{- else }}
            value: "false"
            {{- end }}
        {{- if eq .Values.tls.enabled true }}
          - name: TLS_CERT_PATH
            value: "{{ .Values.tls.certPath }}/"
        volumeMounts:
          - name: cert
            mountPath: "{{ .Values.tls.certPath }}/"
            readOnly: true
        {{- end }}
          {{- end }}
        envFrom:
        - secretRef:
            name: nr-ebpf-agent-secrets
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      hostPID: true
      restartPolicy: Always
      volumes:
      - name: host-root-volume
        hostPath:
          path: /
          type: Directory
      - name: sys-volume
        hostPath:
          path: /sys
          type: Directory
      {{- if (hasKey .Values "tls") }}
      {{- if eq .Values.tls.enabled true }}
      - name: cert
        secret:
          defaultMode: 420
          secretName: {{ include "nr-ebpf-agent-certificates.certificateSecret.name" . }}
      {{- end }}
      {{- end }}
      {{- with include "newrelic.common.nodeSelector" . }}
      nodeSelector:
        {{- . | nindent 8 -}}
      {{- end }}
      {{- with include "nrEbpfAgent.ebpfAgent.affinity" . }}
      affinity:
        {{- . | nindent 8 }}
      {{- end }}
      {{- with include "nrEbpfAgent.ebpfAgent.tolerations" . }}
      tolerations:
        {{- . | nindent 8 }}
      {{- end }}
